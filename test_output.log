============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.1.1, pluggy-1.4.0
rootdir: /home/ubuntu/modal-client
configfile: pyproject.toml
plugins: asyncio-0.23.6, anyio-4.3.0
asyncio: mode=strict
collected 539 items

test/aio_test.py INFO:root:Starting servicer...
INFO:root:Servicer started on host 0.0.0.0, port 37113.
INFO:root:Servicer started and listening.
INFO:root:Event loop running: True
INFO:root:Active tasks at start: ['Task-5', 'Task-6']
✓ Initialized. View run at https://modaltest.com/apps/ap-123
✓ Created objects.
hello, world (1)
✓ App completed. View run at https://modaltest.com/apps/ap-123
.INFO:root:Stopping servicer...
INFO:root:Event loop running before stopping: True
INFO:root:Active tasks before cancellation: 1
INFO:root:Cancelling task: Task-5, ID: 140069399482080
Exception in thread Thread-1 (thread_inner):
Traceback (most recent call last):
  File "/home/ubuntu/.local/lib/python3.10/site-packages/synchronicity/synchronizer.py", line 159, in loop_inner
    await self._stopping.wait()  # wait until told to stop
  File "/usr/lib/python3.10/asyncio/locks.py", line 214, in wait
    await fut
asyncio.exceptions.CancelledError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/home/ubuntu/.local/lib/python3.10/site-packages/synchronicity/synchronizer.py", line 162, in thread_inner
    asyncio.run(loop_inner())
  File "/usr/lib/python3.10/asyncio/runners.py", line 44, in run
    return loop.run_until_complete(main)
  File "/usr/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
asyncio.exceptions.CancelledError
E
test/async_utils_test.py E.....[MainThread] 2024-04-04T17:45:56+0000 Warning: the results of a call to my_generator was not consumed, so the call will never be executed. Consider a for-loop like `for x in my_generator(...)` or unpacking the generator using `list(...)`
WARNING:modal-utils:Warning: the results of a call to my_generator was not consumed, so the call will never be executed. Consider a for-loop like `for x in my_generator(...)` or unpacking the generator using `list(...)`
......
test/blob_test.py EEEEE
test/cli_imports_test.py ..............
test/cli_test.py EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
test/client_test.py EEEFFFEEEEEEEE
test/cls_test.py EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
test/config_test.py ..E.E
test/container_app_test.py E
test/container_test.py EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
test/cpu_test.py E
test/decorator_test.py ......F
test/deprecation_test.py .
test/dict_test.py EEE
test/e2e_test.py EEEEE
test/error_test.py .
test/function_serialization_test.py E
test/function_test.py EEEEEEEEEEEEEEEEEEEEE..EEEEEEEFEFEEEEEE
test/function_utils_test.py .......
test/gpu_test.py EEEEEEEEEEE.EEEE
test/grpc_utils_test.py EEEEEE
test/image_test.py .EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
test/live_reload_test.py EEEE
test/lookup_test.py EEEEE
test/mdmd_test.py .........foo.Foo Foo <class 'foo.Foo'>
foo.funky funky <function funky at 0x7f6470e08310>
......
test/mount_test.py EEEEEEF
test/mounted_files_test.py EEEEEEEEEEEEEE
test/network_file_system_test.py E.EEEEEEEEEE
test/notebook_test.py s
test/object_test.py EE.
test/package_utils_test.py .
test/queue_test.py EEEEEEEEE
test/resolver_test.py ..
test/retries_test.py E
test/runner_test.py EEEE
test/sandbox_test.py EEEEEEEEEEEE
test/schedule_test.py E
test/scheduler_placement_test.py E
test/secret_test.py EEE.EE
test/serialization_test.py E.
test/stub_composition_test.py E
test/stub_test.py EEEEEEEF..[MainThread] 2024-04-04T17:47:35+0000 Warning: Tag 'square' collision! Overriding existing function [test.supports.module_1].square with new function [test.supports.module_2].square
WARNING:modal-client:Warning: Tag 'square' collision! Overriding existing function [test.supports.module_1].square with new function [test.supports.module_2].square
.EEEEE..EEE.EE.E.
test/test_asgi_wrapper.py ...[MainThread] 2024-04-04T17:47:38+0000 Internal error in asgi_app_wrapper
Traceback (most recent call last):
  File "/home/ubuntu/.local/lib/python3.10/site-packages/modal/_asgi.py", line 60, in fetch_data_in
    first_message = await asyncio.wait_for(message_gen.__anext__(), FIRST_MESSAGE_TIMEOUT_SECONDS)
  File "/usr/lib/python3.10/asyncio/tasks.py", line 445, in wait_for
    return fut.result()
  File "/home/ubuntu/modal-client/test/test_asgi_wrapper.py", line 113, in aio
    raise DummyException("error while fetching data")
test.test_asgi_wrapper.DummyException: error while fetching data
ERROR:modal-client:Internal error in asgi_app_wrapper
Traceback (most recent call last):
  File "/home/ubuntu/.local/lib/python3.10/site-packages/modal/_asgi.py", line 60, in fetch_data_in
    first_message = await asyncio.wait_for(message_gen.__anext__(), FIRST_MESSAGE_TIMEOUT_SECONDS)
  File "/usr/lib/python3.10/asyncio/tasks.py", line 445, in wait_for
    return fut.result()
  File "/home/ubuntu/modal-client/test/test_asgi_wrapper.py", line 113, in aio
    raise DummyException("error while fetching data")
test.test_asgi_wrapper.DummyException: error while fetching data
.[MainThread] 2024-04-04T17:47:38+0000 Internal error in asgi_app_wrapper
Traceback (most recent call last):
  File "/home/ubuntu/.local/lib/python3.10/site-packages/modal/_asgi.py", line 60, in fetch_data_in
    first_message = await asyncio.wait_for(message_gen.__anext__(), FIRST_MESSAGE_TIMEOUT_SECONDS)
  File "/usr/lib/python3.10/asyncio/tasks.py", line 445, in wait_for
    return fut.result()
  File "/home/ubuntu/modal-client/test/test_asgi_wrapper.py", line 113, in aio
    raise DummyException("error while fetching data")
test.test_asgi_wrapper.DummyException: error while fetching data
ERROR:modal-client:Internal error in asgi_app_wrapper
Traceback (most recent call last):
  File "/home/ubuntu/.local/lib/python3.10/site-packages/modal/_asgi.py", line 60, in fetch_data_in
    first_message = await asyncio.wait_for(message_gen.__anext__(), FIRST_MESSAGE_TIMEOUT_SECONDS)
  File "/usr/lib/python3.10/asyncio/tasks.py", line 445, in wait_for
    return fut.result()
  File "/home/ubuntu/modal-client/test/test_asgi_wrapper.py", line 113, in aio
    raise DummyException("error while fetching data")
test.test_asgi_wrapper.DummyException: error while fetching data
.....
test/token_flow_test.py E
test/traceback_test.py ....
test/tunnel_test.py EEE
test/utils_test.py ....
test/version_test.py .
test/volume_test.py E..EEEEEEEEEEEEEEE
test/watcher_test.py .
test/webhook_test.py EINFO:httpx:HTTP Request: OPTIONS http://testserver/ "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST http://testserver/ "HTTP/1.1 405 Method Not Allowed"
.INFO:httpx:HTTP Request: GET http://testserver/docs "HTTP/1.1 404 Not Found"
INFO:httpx:HTTP Request: GET http://testserver/redoc "HTTP/1.1 404 Not Found"
..EEEE
test_enter_decorator.py Running test_function_with_parentheses
Type of dummy_function: <class 'modal.partial_function._PartialFunction'>
Flags of dummy_function: 8
.Running test_function_without_parentheses
Type of enter before decoration: <class 'function'>
F

==================================== ERRORS ====================================
________________________ ERROR at teardown of test_new _________________________

    async def async_finalizer() -> None:
        try:
>           await gen_obj.__anext__()

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:206: in __aexit__
    await anext(self.gen)
test/conftest.py:1327: in create_server
    await stop_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <synchronicity.synchronizer.Synchronizer object at 0x7f6475dd5960>
coro = <coroutine object Synchronizer._wrap_check_async_leakage.<locals>.coro_wrapped at 0x7f6472a8d230>
interface = <Interface._ASYNC_WITH_BLOCKING_TYPES: 3>
original_func = <function servicer_factory.<locals>.create_server.<locals>._stop_servicer at 0x7f6472ab8430>

    async def _run_function_async(self, coro, interface, original_func):
        coro = wrap_coro_exception(coro)
        coro = self._wrap_check_async_leakage(coro)
        loop = self._get_loop(start=True)
        if self._is_inside_loop():
            value = await coro
        else:
            c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
            a_fut = asyncio.wrap_future(c_fut)
>           value = await a_fut
E           asyncio.exceptions.CancelledError

../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:331: CancelledError

During handling of the above exception, another exception occurred:

    def finalizer() -> None:
        """Yield again, to finalize."""
    
        async def async_finalizer() -> None:
            try:
                await gen_obj.__anext__()
            except StopAsyncIteration:
                pass
            else:
                msg = "Async generator fixture didn't stop."
                msg += "Yield only once."
                raise ValueError(msg)
    
>       event_loop.run_until_complete(async_finalizer())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:342: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=False debug=False>
future = <Task cancelled name='Task-27' coro=<_wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer.<locals>.async_finalizer() done, defined at /home/ubuntu/.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:332>>

    def run_until_complete(self, future):
        """Run until the Future is done.
    
        If the argument is a coroutine, it is wrapped in a Task.
    
        WARNING: It would be disastrous to call run_until_complete()
        with the same coroutine twice -- it would wrap it in two
        different Tasks and that can't be good.
    
        Return the Future's result, or raise its exception.
        """
        self._check_closed()
        self._check_running()
    
        new_task = not futures.isfuture(future)
        future = tasks.ensure_future(future, loop=self)
        if new_task:
            # An exception is raised if the future didn't complete, so there
            # is no need to log the "destroy pending task" message
            future._log_destroy_pending = False
    
        future.add_done_callback(_run_until_complete_cb)
        try:
            self.run_forever()
        except:
            if new_task and future.done() and not future.cancelled():
                # The coroutine raised a BaseException. Consume the exception
                # to not log a warning, the caller doesn't have access to the
                # local task.
                future.exception()
            raise
        finally:
            future.remove_done_callback(_run_until_complete_cb)
        if not future.done():
            raise RuntimeError('Event loop stopped before Future completed.')
    
>       return future.result()
E       asyncio.exceptions.CancelledError

/usr/lib/python3.10/asyncio/base_events.py:649: CancelledError
------------------------------ Captured log setup ------------------------------
INFO     root:conftest.py:1261 Starting servicer...
INFO     root:conftest.py:1265 Servicer started on host 0.0.0.0, port 37113.
INFO     root:conftest.py:1269 Servicer started and listening.
INFO     root:conftest.py:1270 Event loop running: True
INFO     root:conftest.py:1271 Active tasks at start: ['Task-5', 'Task-6']
---------------------------- Captured log teardown -----------------------------
INFO     root:conftest.py:1274 Stopping servicer...
INFO     root:conftest.py:1275 Event loop running before stopping: True
INFO     root:conftest.py:1279 Active tasks before cancellation: 1
INFO     root:conftest.py:1281 Cancelling task: Task-5, ID: 140069399482080
_________________________ ERROR at setup of test_retry _________________________

cls = <class '_pytest.runner.CallInfo'>
func = <function call_and_report.<locals>.<lambda> at 0x7f6472143b50>
when = 'setup'
reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)

    @classmethod
    def from_call(
        cls,
        func: Callable[[], TResult],
        when: Literal["collect", "setup", "call", "teardown"],
        reraise: Optional[
            Union[Type[BaseException], Tuple[Type[BaseException], ...]]
        ] = None,
    ) -> "CallInfo[TResult]":
        """Call func, wrapping the result in a CallInfo.
    
        :param func:
            The function to call. Called without arguments.
        :param when:
            The phase in which the function is called.
        :param reraise:
            Exception or exceptions that shall propagate if raised by the
            function, instead of being wrapped in the CallInfo.
        """
        excinfo = None
        start = timing.time()
        precise_start = timing.perf_counter()
        try:
>           result: Optional[TResult] = func()

../.local/lib/python3.10/site-packages/_pytest/runner.py:340: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/_pytest/runner.py:240: in <lambda>
    lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise
../.local/lib/python3.10/site-packages/pluggy/_hooks.py:501: in __call__
    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
../.local/lib/python3.10/site-packages/pluggy/_manager.py:119: in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
../.local/lib/python3.10/site-packages/_pytest/unraisableexception.py:85: in pytest_runtest_setup
    yield from unraisable_exception_runtest_hook()
../.local/lib/python3.10/site-packages/_pytest/unraisableexception.py:65: in unraisable_exception_runtest_hook
    yield
../.local/lib/python3.10/site-packages/_pytest/logging.py:843: in pytest_runtest_setup
    yield from self._runtest_for(item, "setup")
../.local/lib/python3.10/site-packages/_pytest/logging.py:832: in _runtest_for
    yield
../.local/lib/python3.10/site-packages/_pytest/capture.py:878: in pytest_runtest_setup
    return (yield)
../.local/lib/python3.10/site-packages/_pytest/threadexception.py:82: in pytest_runtest_setup
    yield from thread_exception_runtest_hook()
../.local/lib/python3.10/site-packages/_pytest/threadexception.py:63: in thread_exception_runtest_hook
    yield
../.local/lib/python3.10/site-packages/_pytest/runner.py:158: in pytest_runtest_setup
    item.session._setupstate.setup(item)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_pytest.runner.SetupState object at 0x7f6474525570>
item = <Coroutine test_retry>

    def setup(self, item: Item) -> None:
        """Setup objects along the collector chain to the item."""
        needed_collectors = item.listchain()
    
        # If a collector fails its setup, fail its entire subtree of items.
        # The setup is not retried for each item - the same exception is used.
        for col, (finalizers, exc) in self.stack.items():
>           assert col in needed_collectors, "previous item was not torn down properly"
E           AssertionError: previous item was not torn down properly

../.local/lib/python3.10/site-packages/_pytest/runner.py:503: AssertionError
_____________________ ERROR at setup of test_blob_put_get ______________________

request = <SubRequest 'servicer' for <Coroutine test_blob_put_get>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647101b640>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6472a8be20>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647101b6d0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_blob_put_failure ____________________

request = <SubRequest 'servicer' for <Coroutine test_blob_put_failure>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6472ab8820>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647101aef0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6472ab8550>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_blob_get_failure ____________________

request = <SubRequest 'servicer' for <Coroutine test_blob_get_failure>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6472e46b00>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647101ae60>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6472e467a0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________________ ERROR at setup of test_blob_large _______________________

request = <SubRequest 'servicer' for <Coroutine test_blob_large>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6472ab8b80>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6472a8bc70>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6472ab8670>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________________ ERROR at setup of test_blob_multipart _____________________

request = <SubRequest 'servicer' for <Coroutine test_blob_multipart>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647101bac0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6472a8bd90>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647101beb0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________ ERROR at setup of test_app_deploy_success ___________________

request = <SubRequest 'servicer' for <Function test_app_deploy_success>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721cfbe0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cc940>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721ce950>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_app_deploy_with_name __________________

request = <SubRequest 'servicer' for <Function test_app_deploy_with_name>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b5a20>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b4280>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b5900>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_secret_create _____________________

request = <SubRequest 'servicer' for <Function test_secret_create>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b5c60>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b4e50>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b5240>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________________ ERROR at setup of test_secret_list ______________________

request = <SubRequest 'servicer' for <Function test_secret_list>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b4ee0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b5cf0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b7010>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_app_token_new _____________________

request = <SubRequest 'servicer' for <Function test_app_token_new>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b6830>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b4940>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b4310>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________________ ERROR at setup of test_app_setup _______________________

request = <SubRequest 'servicer' for <Function test_app_setup>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b4b80>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b7d00>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b6290>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________________ ERROR at setup of test_run __________________________

request = <SubRequest 'servicer' for <Function test_run>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721cfac0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cd1b0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721cf9a0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________________ ERROR at setup of test_run_async _______________________

request = <SubRequest 'servicer' for <Function test_run_async>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721cfa30>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cf130>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721ce3b0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_run_generator _____________________

request = <SubRequest 'servicer' for <Function test_run_generator>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721cc1f0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721ce290>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721cdea0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________ ERROR at setup of test_help_message_unspecified_function ___________

request = <SubRequest 'servicer' for <Function test_help_message_unspecified_function>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6472ab8310>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6472a2a3b0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6472ab83a0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________________ ERROR at setup of test_run_states _______________________

request = <SubRequest 'servicer' for <Function test_run_states>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721cc550>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cea70>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721cf2e0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________________ ERROR at setup of test_run_detach _______________________

request = <SubRequest 'servicer' for <Function test_run_detach>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b6200>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6472ab8040>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b6dd0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________________ ERROR at setup of test_run_quiet _______________________

request = <SubRequest 'servicer' for <Function test_run_quiet>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721cfeb0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6472a8be20>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721ce8c0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________________ ERROR at setup of test_deploy _________________________

request = <SubRequest 'servicer' for <Function test_deploy>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b63b0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b69e0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b5b40>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________________ ERROR at setup of test_run_custom_stub ____________________

request = <SubRequest 'servicer' for <Function test_run_custom_stub>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b77f0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b5fc0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b5e10>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________________ ERROR at setup of test_run_aiofunc ______________________

request = <SubRequest 'servicer' for <Function test_run_aiofunc>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b6b90>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6472a2a680>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b7250>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_run_local_entrypoint __________________

request = <SubRequest 'servicer' for <Function test_run_local_entrypoint>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b5360>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b5d80>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b6a70>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______ ERROR at setup of test_run_local_entrypoint_invalid_with_stub_run _______

request = <SubRequest 'servicer' for <Function test_run_local_entrypoint_invalid_with_stub_run>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b41f0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b67a0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b4b80>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________ ERROR at setup of test_run_parse_args_entrypoint _______________

request = <SubRequest 'servicer' for <Function test_run_parse_args_entrypoint>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b65f0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6472a2a680>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b5090>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________ ERROR at setup of test_run_parse_args_function ________________

request = <SubRequest 'servicer' for <Function test_run_parse_args_function>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b5360>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b7880>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b4e50>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________ ERROR at setup of test_run_user_script_exception _______________

request = <SubRequest 'servicer' for <Function test_run_user_script_exception>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b5ea0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b5cf0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b6710>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________ ERROR at setup of test_no_user_code_in_synchronicity_run ___________

request = <SubRequest 'servicer' for <Function test_no_user_code_in_synchronicity_run>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721cda20>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6472ab84c0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721cd240>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________ ERROR at setup of test_no_user_code_in_synchronicity_deploy __________

request = <SubRequest 'servicer' for <Function test_no_user_code_in_synchronicity_deploy>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b4700>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6472ab8790>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b5fc0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________________ ERROR at setup of test_serve _________________________

request = <SubRequest 'servicer' for <Function test_serve>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b79a0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6472ab8310>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b4e50>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________________ ERROR at setup of test_shell _________________________

request = <SubRequest 'servicer' for <Function test_shell>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b71c0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6472a2a3b0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b4790>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________________ ERROR at setup of test_shell_cmd _______________________

request = <SubRequest 'servicer' for <Function test_shell_cmd>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b41f0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b63b0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b4ca0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_app_descriptions ____________________

request = <SubRequest 'servicer' for <Function test_app_descriptions>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721cd1b0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b6a70>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721cd090>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________________ ERROR at setup of test_logs __________________________

request = <SubRequest 'servicer' for <Function test_logs>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721ce440>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cc1f0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721cfbe0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________________ ERROR at setup of test_nfs_get ________________________

request = <SubRequest 'servicer' for <Function test_nfs_get>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b6dd0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cdf30>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b44c0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________________ ERROR at setup of test_volume_cli _______________________

request = <SubRequest 'servicer' for <Function test_volume_cli>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b70a0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6472ab8310>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b6680>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________________ ERROR at setup of test_volume_get _______________________

request = <SubRequest 'servicer' for <Function test_volume_get>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b4700>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b4ca0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b72e0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_volume_put_force ____________________

request = <SubRequest 'servicer' for <Function test_volume_put_force>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721cf0a0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b77f0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721ce680>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________________ ERROR at setup of test_volume_rm _______________________

request = <SubRequest 'servicer' for <Function test_volume_rm>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b4a60>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6472a2a680>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b7ac0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________ ERROR at setup of test_environment_flag[command0] _______________

request = <SubRequest 'servicer' for <Function test_environment_flag[command0]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b5480>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b7eb0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b4430>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________ ERROR at setup of test_environment_flag[command1] _______________

request = <SubRequest 'servicer' for <Function test_environment_flag[command1]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b63b0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b57e0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b5090>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________ ERROR at setup of test_environment_flag[command2] _______________

request = <SubRequest 'servicer' for <Function test_environment_flag[command2]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721cfd90>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b41f0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721cc700>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________ ERROR at setup of test_environment_flag[command3] _______________

request = <SubRequest 'servicer' for <Function test_environment_flag[command3]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b4a60>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b4280>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b4700>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________ ERROR at setup of test_environment_noflag[command0] ______________

request = <SubRequest 'servicer' for <Function test_environment_noflag[command0]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b6f80>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6472ab8310>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b5cf0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________ ERROR at setup of test_environment_noflag[command1] ______________

request = <SubRequest 'servicer' for <Function test_environment_noflag[command1]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721ce050>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6472ab8040>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721cea70>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________ ERROR at setup of test_environment_noflag[command2] ______________

request = <SubRequest 'servicer' for <Function test_environment_noflag[command2]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f6440>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cf880>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f7130>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________ ERROR at setup of test_environment_noflag[command3] ______________

request = <SubRequest 'servicer' for <Function test_environment_noflag[command3]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f5480>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cc790>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f51b0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________________ ERROR at setup of test_cls __________________________

request = <SubRequest 'servicer' for <Function test_cls>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f6950>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6472ab83a0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f6cb0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_profile_list ______________________

request = <SubRequest 'servicer' for <Function test_profile_list>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f77f0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6472ab8310>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f7370>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________________ ERROR at setup of test_client_type ______________________

request = <SubRequest 'servicer' for <Function test_client_type>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f7010>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6472ab81f0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f6dd0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________ ERROR at setup of test_client_platform_string _________________

request = <SubRequest 'servicer' for <Function test_client_platform_string>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f7ac0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6472ab8040>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f7e20>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_container_client_type _________________

request = <SubRequest 'unix_servicer' for <Coroutine test_container_client_type>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b7ac0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6472ab8280>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b5480>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________ ERROR at setup of test_client_connection_timeout _______________

request = <SubRequest 'unix_servicer' for <Coroutine test_client_connection_timeout>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b5cf0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b7be0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b4c10>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________ ERROR at setup of test_client_server_error __________________

request = <SubRequest 'servicer' for <Coroutine test_client_server_error>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721ce050>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6472ab8280>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721cc940>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________ ERROR at setup of test_client_old_version ___________________

request = <SubRequest 'servicer' for <Coroutine test_client_old_version>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b4ca0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721ce440>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b5cf0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_client_deprecated ___________________

request = <SubRequest 'servicer' for <Coroutine test_client_deprecated>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f6ef0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cd240>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f76d0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________ ERROR at setup of test_client_unauthenticated _________________

request = <SubRequest 'servicer' for <Coroutine test_client_unauthenticated>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721ce950>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cc1f0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721ce290>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________________ ERROR at setup of test_client_from_env ____________________

request = <SubRequest 'servicer' for <Function test_client_from_env>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b6f80>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cf2e0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b6170>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________ ERROR at setup of test_multiple_profile_error _________________

request = <SubRequest 'servicer' for <Function test_multiple_profile_error>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f6680>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cfd00>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f7910>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________ ERROR at setup of test_implicit_default_profile_warning ____________

request = <SubRequest 'servicer' for <Function test_implicit_default_profile_warning>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f5240>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f6d40>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f7130>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________________ ERROR at setup of test_run_class _______________________

request = <SubRequest 'servicer' for <Function test_run_class>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f7be0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f6200>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f6f80>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________________ ERROR at setup of test_call_class_sync ____________________

request = <SubRequest 'servicer' for <Function test_call_class_sync>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f4280>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f4af0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f5120>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_call_cls_remote_sync __________________

request = <SubRequest 'servicer' for <Function test_call_cls_remote_sync>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f6680>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f49d0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f5fc0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________ ERROR at setup of test_call_cls_remote_invalid_type ______________

request = <SubRequest 'servicer' for <Function test_call_cls_remote_invalid_type>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721ce290>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cfd90>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721cc1f0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________ ERROR at setup of test_call_cls_remote_modal_type _______________

request = <SubRequest 'servicer' for <Function test_call_cls_remote_modal_type>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f4040>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721ce680>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f5cf0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_call_class_async ____________________

request = <SubRequest 'servicer' for <Coroutine test_call_class_async>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b77f0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cca60>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b5480>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_run_class_serialized __________________

request = <SubRequest 'servicer' for <Function test_run_class_serialized>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721cfbe0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b41f0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721cf490>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_call_cls_remote_async _________________

request = <SubRequest 'servicer' for <Coroutine test_call_cls_remote_async>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f6200>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b6dd0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f6440>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_can_call_locally ____________________

request = <SubRequest 'servicer' for <Function test_can_call_locally>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721cf2e0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cc1f0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721cf490>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________ ERROR at setup of test_can_call_remotely_from_local ______________

request = <SubRequest 'servicer' for <Function test_can_call_remotely_from_local>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b6ef0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cc940>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b72e0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________ ERROR at setup of test_call_cls_remote_no_args ________________

request = <SubRequest 'servicer' for <Function test_call_cls_remote_no_args>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f4f70>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721ce680>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f4ca0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________________ ERROR at setup of test_lookup _________________________

request = <SubRequest 'servicer' for <Function test_lookup>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721ce050>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cca60>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721cf490>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________ ERROR at setup of test_lookup_lazy_remote ___________________

request = <SubRequest 'servicer' for <Function test_lookup_lazy_remote>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b7370>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721ce4d0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b4820>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_lookup_lazy_spawn ___________________

request = <SubRequest 'servicer' for <Function test_lookup_lazy_spawn>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721c0e50>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b6560>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721c0dc0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_call_not_modal_method _________________

request = <SubRequest 'servicer' for <Function test_call_not_modal_method>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f70a0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b5510>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f4f70>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________ ERROR at setup of test_dont_enter_on_local_access _______________

request = <SubRequest 'servicer' for <Function test_dont_enter_on_local_access>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f6ef0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f77f0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f76d0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________ ERROR at setup of test_dont_enter_on_local_non_modal_call ___________

request = <SubRequest 'servicer' for <Function test_dont_enter_on_local_non_modal_call>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f65f0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f7a30>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f4d30>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________ ERROR at setup of test_enter_on_local_modal_call _______________

request = <SubRequest 'servicer' for <Function test_enter_on_local_modal_call>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721c2200>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f4c10>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721c2a70>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________ ERROR at setup of test_async_enter_on_local_modal_call ____________

request = <SubRequest 'servicer' for <Coroutine test_async_enter_on_local_modal_call>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721c2950>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721c3b50>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721c2ef0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________________ ERROR at setup of test_derived_cls ______________________

request = <SubRequest 'servicer' for <Function test_derived_cls>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721c03a0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721c0c10>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721c1a20>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________ ERROR at setup of test_derived_cls_external_file _______________

request = <SubRequest 'servicer' for <Function test_derived_cls_external_file>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721b5a20>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b4820>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721b5cf0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________________ ERROR at setup of test_rehydrate _______________________

request = <SubRequest 'servicer' for <Function test_rehydrate>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f6200>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b77f0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f4f70>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________________ ERROR at setup of test_unhydrated _______________________

request = <SubRequest 'servicer' for <Function test_unhydrated>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721cd240>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f77f0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721cfac0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________________ ERROR at setup of test_method_args ______________________

request = <SubRequest 'servicer' for <Function test_method_args>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f6680>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f5480>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f7130>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________________ ERROR at setup of test_keep_warm_depr _____________________

request = <SubRequest 'servicer' for <Function test_keep_warm_depr>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721c20e0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f7c70>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721c3490>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________________ ERROR at setup of test_handlers ________________________

request = <SubRequest 'servicer' for <Function test_handlers>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721c0af0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721c0700>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721c1ea0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________________ ERROR at setup of test_build_image ______________________

request = <SubRequest 'servicer' for <Function test_build_image>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721c1900>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721c1b40>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721c2170>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_ ERROR at setup of test_disallow_lifecycle_decorators_with_method[blocking__build] _

request = <SubRequest 'servicer' for <Function test_disallow_lifecycle_decorators_with_method[blocking__build]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721c16c0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721c01f0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721c1750>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_ ERROR at setup of test_disallow_lifecycle_decorators_with_method[blocking__enter] _

request = <SubRequest 'servicer' for <Function test_disallow_lifecycle_decorators_with_method[blocking__enter]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721c2950>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721c0280>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721c15a0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_ ERROR at setup of test_disallow_lifecycle_decorators_with_method[blocking__exit] _

request = <SubRequest 'servicer' for <Function test_disallow_lifecycle_decorators_with_method[blocking__exit]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721c27a0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721c0a60>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721c3490>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________ ERROR at setup of test_deprecated_sync_methods ________________

request = <SubRequest 'servicer' for <Function test_deprecated_sync_methods>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721ce050>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b6f80>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721cc700>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________ ERROR at setup of test_deprecated_async_methods ________________

request = <SubRequest 'servicer' for <Coroutine test_deprecated_async_methods>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f5120>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b4820>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f72e0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________ ERROR at setup of test_snap_method_without_snapshot_enabled __________

request = <SubRequest 'servicer' for <Function test_snap_method_without_snapshot_enabled>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6472e47370>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6472e440d0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6472e46a70>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_config_store_user ___________________

request = <SubRequest 'servicer' for <Function test_config_store_user>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6472e470a0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f4af0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6472e45900>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_workspace_lookup ____________________

request = <SubRequest 'servicer' for <Coroutine test_workspace_lookup>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6472e441f0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6472e449d0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6472e46cb0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________ ERROR at setup of test_container_function_lazily_imported ___________

request = <SubRequest 'unix_servicer' for <Coroutine test_container_function_lazily_imported>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721cc1f0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b4160>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721cd240>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________________ ERROR at setup of test_success ________________________

request = <SubRequest 'unix_servicer' for <Function test_success>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f6dd0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b6f80>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f7010>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_generator_success ___________________

request = <SubRequest 'unix_servicer' for <Function test_generator_success>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721c0280>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721c3370>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721c3be0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_generator_failure ___________________

request = <SubRequest 'unix_servicer' for <Function test_generator_failure>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721c2680>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f4f70>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721c3a30>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________________ ERROR at setup of test_async _________________________

request = <SubRequest 'unix_servicer' for <Function test_async>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f4c10>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f5360>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f5e10>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________________ ERROR at setup of test_failure ________________________

request = <SubRequest 'unix_servicer' for <Function test_failure>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721cf520>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f48b0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721ce290>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_raises_base_exception _________________

request = <SubRequest 'unix_servicer' for <Function test_raises_base_exception>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f7010>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cf0a0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f65f0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_keyboardinterrupt ___________________

request = <SubRequest 'unix_servicer' for <Function test_keyboardinterrupt>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6472e441f0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b4160>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6472e45510>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_rate_limited ______________________

request = <SubRequest 'unix_servicer' for <Function test_rate_limited>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6472e46b90>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b72e0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f4d30>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_grpc_failure ______________________

request = <SubRequest 'unix_servicer' for <Function test_grpc_failure>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6472e45ea0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6472e45630>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6472e47910>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________ ERROR at setup of test_missing_main_conditional ________________

request = <SubRequest 'unix_servicer' for <Function test_missing_main_conditional>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721c3e20>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6472e449d0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721c31c0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________________ ERROR at setup of test_startup_failure ____________________

request = <SubRequest 'unix_servicer' for <Function test_startup_failure>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6472e47c70>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cc700>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6472e45870>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______ ERROR at setup of test_from_local_python_packages_inside_container ______

request = <SubRequest 'unix_servicer' for <Function test_from_local_python_packages_inside_container>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6472e46950>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cd3f0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6472e449d0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________________ ERROR at setup of test_webhook ________________________

request = <SubRequest 'unix_servicer' for <Function test_webhook>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721c01f0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cd240>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721c1b40>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________ ERROR at setup of test_serialized_function __________________

request = <SubRequest 'unix_servicer' for <Function test_serialized_function>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721c05e0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721c0dc0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721c3f40>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________ ERROR at setup of test_webhook_serialized ___________________

request = <SubRequest 'unix_servicer' for <Function test_webhook_serialized>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f7eb0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721c31c0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f6dd0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________ ERROR at setup of test_function_returning_generator ______________

request = <SubRequest 'unix_servicer' for <Function test_function_returning_generator>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710b0af0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710b1ab0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710b1900>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________________ ERROR at setup of test_asgi __________________________

request = <SubRequest 'unix_servicer' for <Function test_asgi>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6472e470a0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cf520>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6472e45990>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________________ ERROR at setup of test_wsgi __________________________

request = <SubRequest 'unix_servicer' for <Function test_wsgi>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f6200>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cf0a0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f6560>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________ ERROR at setup of test_webhook_streaming_sync _________________

request = <SubRequest 'unix_servicer' for <Function test_webhook_streaming_sync>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721cfe20>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f70a0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721cd3f0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________ ERROR at setup of test_webhook_streaming_async ________________

request = <SubRequest 'unix_servicer' for <Function test_webhook_streaming_async>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710b0af0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cca60>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710b1900>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_cls_function ______________________

request = <SubRequest 'unix_servicer' for <Function test_cls_function>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721c20e0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b6f80>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721c0c10>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_lifecycle_enter_sync __________________

request = <SubRequest 'unix_servicer' for <Function test_lifecycle_enter_sync>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721c01f0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721c1cf0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721c2cb0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_lifecycle_enter_async _________________

request = <SubRequest 'unix_servicer' for <Function test_lifecycle_enter_async>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721c32e0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721c11b0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721c3d00>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________ ERROR at setup of test_param_cls_function ___________________

request = <SubRequest 'unix_servicer' for <Function test_param_cls_function>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6472e45fc0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721c0dc0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6472e46a70>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_cls_web_endpoint ____________________

request = <SubRequest 'unix_servicer' for <Function test_cls_web_endpoint>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710b3d90>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b6f80>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710b1900>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________________ ERROR at setup of test_serialized_cls _____________________

request = <SubRequest 'unix_servicer' for <Function test_serialized_cls>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721c27a0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cc1f0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721c1cf0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_cls_generator _____________________

request = <SubRequest 'unix_servicer' for <Function test_cls_generator>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721c1f30>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cfe20>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721c05e0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________ ERROR at setup of test_checkpointing_cls_function _______________

request = <SubRequest 'unix_servicer' for <Function test_checkpointing_cls_function>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710dacb0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710dbac0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710d8f70>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________ ERROR at setup of test_cls_enter_uses_event_loop _______________

request = <SubRequest 'unix_servicer' for <Function test_cls_enter_uses_event_loop>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f5e10>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710d83a0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f5480>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_container_heartbeats __________________

request = <SubRequest 'unix_servicer' for <Function test_container_heartbeats>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710d8940>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721b72e0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710da4d0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________________ ERROR at setup of test_cli __________________________

request = <SubRequest 'unix_servicer' for <Function test_cli>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f4280>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721ce290>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f5d80>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________ ERROR at setup of test_function_sibling_hydration _______________

request = <SubRequest 'unix_servicer' for <Function test_function_sibling_hydration>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710b20e0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cf0a0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710b01f0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________________ ERROR at setup of test_multistub _______________________

request = <SubRequest 'unix_servicer' for <Function test_multistub>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710b0310>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710b3370>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710b3520>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________ ERROR at setup of test_multistub_privately_decorated _____________

request = <SubRequest 'unix_servicer' for <Function test_multistub_privately_decorated>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710cef80>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710b16c0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710cf9a0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______ ERROR at setup of test_multistub_privately_decorated_named_stub ________

request = <SubRequest 'unix_servicer' for <Function test_multistub_privately_decorated_named_stub>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f5e10>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710ce4d0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f65f0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________ ERROR at setup of test_multistub_same_name_warning ______________

request = <SubRequest 'unix_servicer' for <Function test_multistub_same_name_warning>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710b3910>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710cd5a0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710b13f0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________ ERROR at setup of test_multistub_serialized_func _______________

request = <SubRequest 'unix_servicer' for <Function test_multistub_serialized_func>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f4d30>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6472e449d0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f4280>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________ ERROR at setup of test_image_run_function_no_warn _______________

request = <SubRequest 'unix_servicer' for <Function test_image_run_function_no_warn>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710b01f0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6472e47eb0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710b1900>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________ ERROR at setup of test_concurrent_inputs_sync_function ____________

request = <SubRequest 'unix_servicer' for <Function test_concurrent_inputs_sync_function>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721c0af0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f7010>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721c03a0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________ ERROR at setup of test_concurrent_inputs_async_function ____________

request = <SubRequest 'unix_servicer' for <Function test_concurrent_inputs_async_function>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721c32e0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721ce290>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721c28c0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_unassociated_function _________________

request = <SubRequest 'unix_servicer' for <Function test_unassociated_function>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710ce3b0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cf520>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710cdea0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________ ERROR at setup of test_param_cls_function_calling_local ____________

request = <SubRequest 'unix_servicer' for <Function test_param_cls_function_calling_local>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721c0dc0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721c0040>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721c3a30>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________________ ERROR at setup of test_derived_cls ______________________

request = <SubRequest 'unix_servicer' for <Function test_derived_cls>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710db9a0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710d8040>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710dbeb0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________ ERROR at setup of test_call_function_that_calls_function ___________

request = <SubRequest 'unix_servicer' for <Function test_call_function_that_calls_function>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721c1ea0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710daef0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721c3400>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________ ERROR at setup of test_call_function_that_calls_method ____________

request = <SubRequest 'unix_servicer' for <Function test_call_function_that_calls_method>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f4af0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f5e10>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f4d30>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________ ERROR at setup of test_checkpoint_and_restore_success _____________

request = <SubRequest 'unix_servicer' for <Function test_checkpoint_and_restore_success>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721c13f0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f6dd0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721c1cf0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_volume_commit_on_exit _________________

request = <SubRequest 'unix_servicer' for <Function test_volume_commit_on_exit>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f7eb0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710cd750>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f5480>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________ ERROR at setup of test_volume_commit_on_error _________________

request = <SubRequest 'unix_servicer' for <Function test_volume_commit_on_error>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6472e449d0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710cfa30>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6472e47eb0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________ ERROR at setup of test_no_volume_commit_on_exit ________________

request = <SubRequest 'unix_servicer' for <Function test_no_volume_commit_on_exit>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710b0d30>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cf640>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710b2dd0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______ ERROR at setup of test_volume_commit_on_exit_doesnt_fail_container ______

request = <SubRequest 'unix_servicer' for <Function test_volume_commit_on_exit_doesnt_fail_container>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710b0af0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6472e45870>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710b3520>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________ ERROR at setup of test_function_dep_hydration _________________

request = <SubRequest 'unix_servicer' for <Function test_function_dep_hydration>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721c3490>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6472e45510>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721c2680>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________ ERROR at setup of test_build_decorator_cls __________________

request = <SubRequest 'unix_servicer' for <Function test_build_decorator_cls>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710da710>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721c3b50>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710d93f0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________ ERROR at setup of test_multiple_build_decorator_cls ______________

request = <SubRequest 'unix_servicer' for <Function test_multiple_build_decorator_cls>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710c0940>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710d9510>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710c0310>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___ ERROR at setup of test_function_io_doesnt_inspect_args_or_return_values ____

request = <SubRequest 'unix_servicer' for <Function test_function_io_doesnt_inspect_args_or_return_values>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710b05e0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710b0f70>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710b0550>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_ ERROR at setup of test_cancellation_aborts_current_input_on_match[delay-input_args0-cancelled_input_ids0-expected_container_output0-1] _

request = <SubRequest 'servicer' for <Function test_cancellation_aborts_current_input_on_match[delay-input_args0-cancelled_input_ids0-expected_container_output0-1]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710cd5a0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710b0af0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710cd000>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_ ERROR at setup of test_cancellation_aborts_current_input_on_match[delay_async-input_args1-cancelled_input_ids1-expected_container_output1-1] _

request = <SubRequest 'servicer' for <Function test_cancellation_aborts_current_input_on_match[delay_async-input_args1-cancelled_input_ids1-expected_container_output1-1]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710da4d0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710d8a60>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710d8670>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_ ERROR at setup of test_cancellation_aborts_current_input_on_match[delay-input_args2-cancelled_input_ids2-expected_container_output2-0] _

request = <SubRequest 'servicer' for <Function test_cancellation_aborts_current_input_on_match[delay-input_args2-cancelled_input_ids2-expected_container_output2-0]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f5360>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710d9510>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f44c0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_ ERROR at setup of test_cancellation_aborts_current_input_on_match[delay_async-input_args3-cancelled_input_ids3-expected_container_output3-0] _

request = <SubRequest 'servicer' for <Function test_cancellation_aborts_current_input_on_match[delay_async-input_args3-cancelled_input_ids3-expected_container_output3-0]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710b0550>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710d93f0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710b0f70>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_ ERROR at setup of test_cancellation_stops_task_with_concurrent_inputs[delay] _

request = <SubRequest 'servicer' for <Function test_cancellation_stops_task_with_concurrent_inputs[delay]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710c3490>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710cdab0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710c0670>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_ ERROR at setup of test_cancellation_stops_task_with_concurrent_inputs[delay_async] _

request = <SubRequest 'servicer' for <Function test_cancellation_stops_task_with_concurrent_inputs[delay_async]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710b29e0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710cce50>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710b3910>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________________ ERROR at setup of test_lifecycle_full _____________________

request = <SubRequest 'servicer' for <Function test_lifecycle_full>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6472e45870>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710b3f40>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6472e47eb0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_stop_fetching_inputs __________________

request = <SubRequest 'unix_servicer' for <Function test_stop_fetching_inputs>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f4d30>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710b20e0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f5360>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______ ERROR at setup of test_container_heartbeat_survives_grpc_deadlines ______

request = <SubRequest 'servicer' for <Function test_container_heartbeat_survives_grpc_deadlines>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710dadd0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721ce290>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710da4d0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____ ERROR at setup of test_container_heartbeat_survives_local_exceptions _____

request = <SubRequest 'servicer' for <Function test_container_heartbeat_survives_local_exceptions>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647101b6d0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cf520>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647101b250>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________ ERROR at setup of test_sigint_termination_input[delay] ____________

request = <SubRequest 'servicer' for <Function test_sigint_termination_input[delay]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710c0940>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710dacb0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710c29e0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________ ERROR at setup of test_sigint_termination_input[delay_async] _________

request = <SubRequest 'servicer' for <Function test_sigint_termination_input[delay_async]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647101b400>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710cdab0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647101b760>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__ ERROR at setup of test_sigint_termination_enter_handler[delay-sync_enter] ___

request = <SubRequest 'servicer' for <Function test_sigint_termination_enter_handler[delay-sync_enter]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721c1360>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710cd5a0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721c3a30>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__ ERROR at setup of test_sigint_termination_enter_handler[delay-async_enter] __

request = <SubRequest 'servicer' for <Function test_sigint_termination_enter_handler[delay-async_enter]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710dacb0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721c3ac0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710da8c0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_ ERROR at setup of test_sigint_termination_enter_handler[delay_async-sync_enter] _

request = <SubRequest 'servicer' for <Function test_sigint_termination_enter_handler[delay_async-sync_enter]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721c2170>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f4280>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721c27a0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_ ERROR at setup of test_sigint_termination_enter_handler[delay_async-async_enter] _

request = <SubRequest 'servicer' for <Function test_sigint_termination_enter_handler[delay_async-async_enter]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710b25f0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f5480>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710b05e0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______ ERROR at setup of test_sigint_termination_exit_handler[sync_exit] _______

request = <SubRequest 'servicer' for <Function test_sigint_termination_exit_handler[sync_exit]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710c03a0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710b29e0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710c0b80>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______ ERROR at setup of test_sigint_termination_exit_handler[async_exit] ______

request = <SubRequest 'servicer' for <Function test_sigint_termination_exit_handler[async_exit]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710ccee0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cf640>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710cea70>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________________ ERROR at setup of test_cpu_lower_bound ____________________

request = <SubRequest 'servicer' for <Function test_cpu_lower_bound>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710c0040>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710c12d0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710c2b00>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________________ ERROR at setup of test_dict_app ________________________

request = <SubRequest 'servicer' for <Function test_dict_app>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647101b5b0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710b0550>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647101bc70>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________________ ERROR at setup of test_dict_ephemeral _____________________

request = <SubRequest 'servicer' for <Function test_dict_ephemeral>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f5240>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710b05e0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f6dd0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________ ERROR at setup of test_dict_lazy_hydrate_named ________________

request = <SubRequest 'servicer' for <Function test_dict_lazy_hydrate_named>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647101ad40>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f4a60>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647101b5b0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________________ ERROR at setup of test_run_e2e ________________________

request = <SubRequest 'servicer' for <Function test_run_e2e>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710c2b00>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647101b1c0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710c32e0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_run_progress_info ___________________

request = <SubRequest 'servicer' for <Function test_run_progress_info>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710c39a0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cf640>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710c2cb0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_run_profiler ______________________

request = <SubRequest 'servicer' for <Function test_run_profiler>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647101b520>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710c2c20>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647101b6d0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________ ERROR at setup of test_run_unconsumed_map ___________________

request = <SubRequest 'servicer' for <Function test_run_unconsumed_map>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f4d30>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710ccee0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721f5480>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________ ERROR at setup of test_auth_failure_last_line _________________

request = <SubRequest 'servicer' for <Function test_auth_failure_last_line>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647101b520>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cf520>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647101b6d0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________ ERROR at setup of test_serialize_deserialize_function _____________

request = <SubRequest 'servicer' for <Coroutine test_serialize_deserialize_function>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710c2c20>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647101be20>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710c3640>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_run_function ______________________

request = <SubRequest 'servicer' for <Function test_run_function>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710d8670>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710c0670>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710db880>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_call_function_locally _________________

request = <SubRequest 'servicer' for <Coroutine test_call_function_locally>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647101b760>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710c3370>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647101b520>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________________ ERROR at setup of test_map[False] _______________________

request = <SubRequest 'servicer' for <Function test_map[False]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710c3880>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710b0d30>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710c2c20>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________________ ERROR at setup of test_map[True] _______________________

request = <SubRequest 'servicer' for <Function test_map[True]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f15bd0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710c3130>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f17ac0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________________ ERROR at setup of test_for_each ________________________

request = <SubRequest 'servicer' for <Function test_for_each>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710c1bd0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cf520>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710c2c20>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________________ ERROR at setup of test_map_none_values ____________________

request = <SubRequest 'servicer' for <Function test_map_none_values>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647101a9e0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710cd5a0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647101b490>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________________ ERROR at setup of test_starmap ________________________

request = <SubRequest 'servicer' for <Function test_starmap>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f168c0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710cdab0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f164d0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________ ERROR at setup of test_function_memory_request ________________

request = <SubRequest 'servicer' for <Function test_function_memory_request>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647101bbe0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647101b1c0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647101a9e0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_function_cpu_request __________________

request = <SubRequest 'servicer' for <Function test_function_cpu_request>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710c39a0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647101ad40>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710c1cf0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________________ ERROR at setup of test_function_future ____________________

request = <SubRequest 'servicer' for <Function test_function_future>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710b0550>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cf520>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710b1ab0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_function_future_async _________________

request = <SubRequest 'servicer' for <Coroutine test_function_future_async>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710c1bd0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710cdab0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710c37f0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________________ ERROR at setup of test_generator _______________________

request = <SubRequest 'servicer' for <Coroutine test_generator>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f14670>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710d8550>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f14940>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_generator_map_invalid _________________

request = <SubRequest 'servicer' for <Coroutine test_generator_map_invalid>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710c0a60>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710c1cf0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710c37f0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________________ ERROR at setup of test_generator_async ____________________

request = <SubRequest 'servicer' for <Coroutine test_generator_async>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710d8670>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710c20e0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710d8a60>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_generator_future ____________________

request = <SubRequest 'servicer' for <Coroutine test_generator_future>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647101ba30>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cf640>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710d8550>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_sync_parallelism ____________________

request = <SubRequest 'servicer' for <Function test_sync_parallelism>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710c03a0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647101beb0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710c2c20>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________________ ERROR at setup of test_proxy _________________________

request = <SubRequest 'servicer' for <Function test_proxy>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f14550>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710cdea0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f15ea0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________ ERROR at setup of test_function_exception ___________________

request = <SubRequest 'servicer' for <Function test_function_exception>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647101a9e0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710ccee0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647101b490>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________ ERROR at setup of test_function_exception_async ________________

request = <SubRequest 'servicer' for <Coroutine test_function_exception_async>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710d8670>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710cd5a0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710d8550>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________________ ERROR at setup of test_map_exceptions _____________________

request = <SubRequest 'servicer' for <Function test_map_exceptions>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647101b640>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cf520>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647101b5b0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________ ERROR at setup of test_function_relative_import_hint _____________

request = <SubRequest 'servicer' for <Function test_function_relative_import_hint>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f15f30>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647101b520>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f149d0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________ ERROR at setup of test_closure_valued_serialized_function ___________

request = <SubRequest 'servicer' for <Function test_closure_valued_serialized_function>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470cc0a60>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710cdea0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470cc11b0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_new_hydrated_internal _________________

request = <SubRequest 'servicer' for <Function test_new_hydrated_internal>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470cc3b50>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710d8a60>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470cc2a70>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________________ ERROR at setup of test_from_id ________________________

request = <SubRequest 'servicer' for <Function test_from_id>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470cc03a0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710b3520>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470cc05e0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________ ERROR at setup of test_allow_cross_region_volumes _______________

request = <SubRequest 'servicer' for <Function test_allow_cross_region_volumes>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470cc2680>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710ccee0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470cc0c10>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________ ERROR at setup of test_allow_cross_region_volumes_webhook ___________

request = <SubRequest 'servicer' for <Function test_allow_cross_region_volumes_webhook>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721f44c0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710b1000>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470cc2710>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________ ERROR at setup of test_serialize_deserialize_function_handle _________

request = <SubRequest 'servicer' for <Function test_serialize_deserialize_function_handle>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710cdea0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647101b250>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710cdab0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________ ERROR at setup of test_default_cloud_provider _________________

request = <SubRequest 'servicer' for <Function test_default_cloud_provider>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710b3760>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710c0b80>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64710b1000>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________ ERROR at setup of test_invalid_large_serialization ______________

request = <SubRequest 'servicer' for <Function test_invalid_large_serialization>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647101b520>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710b3520>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647101bf40>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_deps_explicit _____________________

request = <SubRequest 'servicer' for <Function test_deps_explicit>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f17490>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710b3760>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f16c20>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_deps_closurevars ____________________

request = <SubRequest 'servicer' for <Function test_deps_closurevars>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710d8670>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710b0550>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f14dc0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________ ERROR at setup of test_calls_should_not_unwrap_modal_objects _________

request = <SubRequest 'servicer' for <Function test_calls_should_not_unwrap_modal_objects>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f140d0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647101bf40>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f14280>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______ ERROR at setup of test_calls_should_not_unwrap_modal_objects_gen _______

request = <SubRequest 'servicer' for <Function test_calls_should_not_unwrap_modal_objects_gen>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f14ca0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647101ba30>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f14820>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________ ERROR at setup of test_mount_deps_have_ids __________________

request = <SubRequest 'servicer' for <Function test_mount_deps_have_ids>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470cc0c10>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710c1bd0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470cc2290>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________________ ERROR at setup of test_no_state_reuse _____________________

request = <SubRequest 'servicer' for <Function test_no_state_reuse>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470cc0940>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710c0a60>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470cc0af0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_gpu_true_function ___________________

request = <SubRequest 'servicer' for <Function test_gpu_true_function>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721cc160>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cf520>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721cd750>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_gpu_any_function ____________________

request = <SubRequest 'servicer' for <Function test_gpu_any_function>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647101b640>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cd120>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647101ba30>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_gpu_string_config ___________________

request = <SubRequest 'servicer' for <Function test_gpu_string_config>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f14dc0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647101bf40>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f15240>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________ ERROR at setup of test_gpu_string_count_config ________________

request = <SubRequest 'servicer' for <Function test_gpu_string_count_config>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470cc0670>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470cc0160>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470cc01f0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________ ERROR at setup of test_gpu_config_function __________________

request = <SubRequest 'servicer' for <Function test_gpu_config_function>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f15cf0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710ccee0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f16200>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________ ERROR at setup of test_cloud_provider_selection ________________

request = <SubRequest 'servicer' for <Function test_cloud_provider_selection>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f16320>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710d8a60>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f17be0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________ ERROR at setup of test_memory_selection_gpu_variant[0-2-40] __________

request = <SubRequest 'servicer' for <Function test_memory_selection_gpu_variant[0-2-40]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470cc2f80>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470f171c0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470cc0e50>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________ ERROR at setup of test_memory_selection_gpu_variant[40-2-40] _________

request = <SubRequest 'servicer' for <Function test_memory_selection_gpu_variant[40-2-40]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470cc27a0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710ccee0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470cc3250>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________ ERROR at setup of test_memory_selection_gpu_variant[80-8-80] _________

request = <SubRequest 'servicer' for <Function test_memory_selection_gpu_variant[80-8-80]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470cc39a0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710cdea0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470cc0310>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________ ERROR at setup of test_memory_selection_gpu_variant[40GB-2-40] ________

request = <SubRequest 'servicer' for <Function test_memory_selection_gpu_variant[40GB-2-40]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721cf520>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710c0b80>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721ce830>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________ ERROR at setup of test_memory_selection_gpu_variant[80GB-8-80] ________

request = <SubRequest 'servicer' for <Function test_memory_selection_gpu_variant[80GB-8-80]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470cc3c70>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710c2c20>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470cc01f0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________ ERROR at setup of test_gpu_type_selection_from_count[1] ____________

request = <SubRequest 'servicer' for <Function test_gpu_type_selection_from_count[1]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f16830>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f44c0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f17c70>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________ ERROR at setup of test_gpu_type_selection_from_count[2] ____________

request = <SubRequest 'servicer' for <Function test_gpu_type_selection_from_count[2]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f15cf0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470f14790>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f15240>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________ ERROR at setup of test_gpu_type_selection_from_count[3] ____________

request = <SubRequest 'servicer' for <Function test_gpu_type_selection_from_count[3]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f17250>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470f15c60>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f15f30>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________ ERROR at setup of test_gpu_type_selection_from_count[4] ____________

request = <SubRequest 'servicer' for <Function test_gpu_type_selection_from_count[4]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470cc2830>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470f140d0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470cc3c70>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_http_channel ______________________

request = <SubRequest 'servicer' for <Coroutine test_http_channel>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f17be0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f44c0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f14820>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_unix_channel ______________________

request = <SubRequest 'unix_servicer' for <Coroutine test_unix_channel>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64710cdab0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647101b640>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f16320>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_channel_pool ______________________

request = <SubRequest 'servicer' for <Coroutine test_channel_pool>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f17490>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710ccee0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f17c70>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________ ERROR at setup of test_channel_pool_closed_transport _____________

request = <SubRequest 'servicer' for <Coroutine test_channel_pool_closed_transport>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721cdc60>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647101b5b0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721ccee0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________ ERROR at setup of test_channel_pool_max_active ________________

request = <SubRequest 'servicer' for <Coroutine test_channel_pool_max_active>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f17be0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cf640>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f17250>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________ ERROR at setup of test_retry_transient_errors _________________

request = <SubRequest 'servicer' for <Coroutine test_retry_transient_errors>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721cd870>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710d8a60>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721cd990>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________ ERROR at setup of test_image_base[2023.12] __________________

request = <SubRequest 'servicer' for <Function test_image_base[2023.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470cc2710>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f44c0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470cc0ca0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________ ERROR at setup of test_image_base[2024.04] __________________

request = <SubRequest 'servicer' for <Function test_image_base[2024.04]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721cef80>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710cdab0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721ccee0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________ ERROR at setup of test_image_python_packages[2023.12] _____________

request = <SubRequest 'servicer' for <Function test_image_python_packages[2023.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f172e0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cee60>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f17490>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________ ERROR at setup of test_image_python_packages[2024.04] _____________

request = <SubRequest 'servicer' for <Function test_image_python_packages[2024.04]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721cf400>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710ccee0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721cd870>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________ ERROR at setup of test_image_kwargs_validation[2023.12] ____________

request = <SubRequest 'servicer' for <Function test_image_kwargs_validation[2023.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470cc27a0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710c0a60>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470cc0af0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________ ERROR at setup of test_image_kwargs_validation[2024.04] ____________

request = <SubRequest 'servicer' for <Function test_image_kwargs_validation[2024.04]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721cf250>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470cc1bd0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721cdc60>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________ ERROR at setup of test_wrong_type[2023.12] __________________

request = <SubRequest 'servicer' for <Function test_wrong_type[2023.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470cc0c10>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cd2d0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470cc0670>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________ ERROR at setup of test_wrong_type[2024.04] __________________

request = <SubRequest 'servicer' for <Function test_wrong_type[2024.04]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f176d0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f44c0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f17b50>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________ ERROR at setup of test_image_requirements_txt[2023.12] ____________

request = <SubRequest 'servicer' for <Function test_image_requirements_txt[2023.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470c51090>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470f15ea0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470c52b90>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________ ERROR at setup of test_image_requirements_txt[2024.04] ____________

request = <SubRequest 'servicer' for <Function test_image_requirements_txt[2024.04]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470cc0a60>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470f16a70>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470cc0c10>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________ ERROR at setup of test_empty_install[2023.12] _________________

request = <SubRequest 'servicer' for <Function test_empty_install[2023.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f17be0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470cc1000>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f14160>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________ ERROR at setup of test_empty_install[2024.04] _________________

request = <SubRequest 'servicer' for <Function test_empty_install[2024.04]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721ce5f0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647101ba30>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f14940>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________ ERROR at setup of test_debian_slim_apt_install[2023.12] ____________

request = <SubRequest 'servicer' for <Function test_debian_slim_apt_install[2023.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470c52440>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cd510>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470c51ab0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________ ERROR at setup of test_debian_slim_apt_install[2024.04] ____________

request = <SubRequest 'servicer' for <Function test_debian_slim_apt_install[2024.04]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f16a70>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710cdab0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f15510>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________ ERROR at setup of test_image_pip_install_pyproject[2023.12] __________

request = <SubRequest 'servicer' for <Function test_image_pip_install_pyproject[2023.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470c53b50>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cd990>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470c53490>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________ ERROR at setup of test_image_pip_install_pyproject[2024.04] __________

request = <SubRequest 'servicer' for <Function test_image_pip_install_pyproject[2024.04]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f15cf0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647101b490>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f15ea0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__ ERROR at setup of test_image_pip_install_pyproject_with_optionals[2023.12] __

request = <SubRequest 'servicer' for <Function test_image_pip_install_pyproject_with_optionals[2023.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470c53520>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647101ad40>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470c53640>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__ ERROR at setup of test_image_pip_install_pyproject_with_optionals[2024.04] __

request = <SubRequest 'servicer' for <Function test_image_pip_install_pyproject_with_optionals[2024.04]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f176d0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cd870>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f15510>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______ ERROR at setup of test_image_pip_install_private_repos[2023.12] ________

request = <SubRequest 'servicer' for <Function test_image_pip_install_private_repos[2023.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470cc0670>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710d8670>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470cc39a0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______ ERROR at setup of test_image_pip_install_private_repos[2024.04] ________

request = <SubRequest 'servicer' for <Function test_image_pip_install_private_repos[2024.04]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470c52d40>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470cc1ab0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470c50040>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________ ERROR at setup of test_conda_install[2023.12] _________________

request = <SubRequest 'servicer' for <Function test_conda_install[2023.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470cc0670>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470cc0c10>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470cc2f80>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________ ERROR at setup of test_conda_install[2024.04] _________________

request = <SubRequest 'servicer' for <Function test_conda_install[2024.04]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470c50790>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470cc1000>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470c53880>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________ ERROR at setup of test_dockerfile_image[2023.12] _______________

request = <SubRequest 'servicer' for <Function test_dockerfile_image[2023.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470cc1c60>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470cc27a0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470cc1ab0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________ ERROR at setup of test_dockerfile_image[2024.04] _______________

request = <SubRequest 'servicer' for <Function test_dockerfile_image[2024.04]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470c52680>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470cc3910>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470c52170>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________ ERROR at setup of test_conda_update_from_environment[2023.12] _________

request = <SubRequest 'servicer' for <Function test_conda_update_from_environment[2023.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470cc27a0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470cc1bd0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470cc2f80>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________ ERROR at setup of test_conda_update_from_environment[2024.04] _________

request = <SubRequest 'servicer' for <Function test_conda_update_from_environment[2024.04]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470c51ab0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470cc0ca0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470c53be0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_run_commands[2023.12] _________________

request = <SubRequest 'servicer' for <Function test_run_commands[2023.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f17250>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470cc3400>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f148b0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_run_commands[2024.04] _________________

request = <SubRequest 'servicer' for <Function test_run_commands[2024.04]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470c539a0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470f16a70>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470c52320>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________ ERROR at setup of test_dockerhub_install[2023.12] _______________

request = <SubRequest 'servicer' for <Function test_dockerhub_install[2023.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470c53520>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470f17be0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470c52560>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________ ERROR at setup of test_dockerhub_install[2024.04] _______________

request = <SubRequest 'servicer' for <Function test_dockerhub_install[2024.04]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f17520>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710d8550>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f148b0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_ecr_install[2023.12] __________________

request = <SubRequest 'servicer' for <Function test_ecr_install[2023.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721cc160>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710d8670>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721cd2d0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_ecr_install[2024.04] __________________

request = <SubRequest 'servicer' for <Function test_ecr_install[2024.04]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470c53b50>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cee60>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470c512d0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________ ERROR at setup of test_image_run_function[2023.12] ______________

request = <SubRequest 'servicer' for <Function test_image_run_function[2023.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470c51c60>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647101b490>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470c52830>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________ ERROR at setup of test_image_run_function[2024.04] ______________

request = <SubRequest 'servicer' for <Function test_image_run_function[2024.04]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f15ea0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647101b5b0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f16830>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______ ERROR at setup of test_image_run_function_interactivity[2023.12] _______

request = <SubRequest 'servicer' for <Function test_image_run_function_interactivity[2023.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470c50e50>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f44c0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470c53130>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______ ERROR at setup of test_image_run_function_interactivity[2024.04] _______

request = <SubRequest 'servicer' for <Function test_image_run_function_interactivity[2024.04]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470cc3400>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647101ba30>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470cc3910>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________ ERROR at setup of test_image_run_function_globals[2023.12] __________

request = <SubRequest 'servicer' for <Function test_image_run_function_globals[2023.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f172e0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cd2d0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f148b0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________ ERROR at setup of test_image_run_function_globals[2024.04] __________

request = <SubRequest 'servicer' for <Function test_image_run_function_globals[2024.04]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470c52290>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cee60>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470c52ef0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______ ERROR at setup of test_image_run_unserializable_function[2023.12] _______

request = <SubRequest 'servicer' for <Function test_image_run_unserializable_function[2023.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470cc0af0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cd750>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470cc0670>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______ ERROR at setup of test_image_run_unserializable_function[2024.04] _______

request = <SubRequest 'servicer' for <Function test_image_run_unserializable_function[2024.04]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470e0ab90>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647101ba30>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470e0ac20>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________ ERROR at setup of test_image_run_function_with_args[2023.12] _________

request = <SubRequest 'servicer' for <Function test_image_run_function_with_args[2023.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470c50e50>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647101ad40>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470c53b50>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________ ERROR at setup of test_image_run_function_with_args[2024.04] _________

request = <SubRequest 'servicer' for <Function test_image_run_function_with_args[2024.04]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470cc0c10>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647101b5b0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470cc39a0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________________ ERROR at setup of test_poetry[2023.12] ____________________

request = <SubRequest 'servicer' for <Function test_poetry[2023.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f14d30>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470cc0af0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f17be0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________________ ERROR at setup of test_poetry[2024.04] ____________________

request = <SubRequest 'servicer' for <Function test_poetry[2024.04]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470cc39a0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470f172e0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470c53370>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________ ERROR at setup of test_image_copy_local_dir[2023.12] _____________

request = <SubRequest 'servicer' for <Function test_image_copy_local_dir[2023.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f16830>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470cc0c10>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f148b0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________ ERROR at setup of test_image_copy_local_dir[2024.04] _____________

request = <SubRequest 'servicer' for <Function test_image_copy_local_dir[2024.04]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470c509d0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470f17490>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470c536d0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________ ERROR at setup of test_image_docker_command_copy[2023.12] ___________

request = <SubRequest 'servicer' for <Function test_image_docker_command_copy[2023.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470e0a830>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f44c0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470e0aa70>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________ ERROR at setup of test_image_docker_command_copy[2024.04] ___________

request = <SubRequest 'servicer' for <Function test_image_docker_command_copy[2024.04]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470c501f0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cee60>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470c52830>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________ ERROR at setup of test_image_dockerfile_copy[2023.12] _____________

request = <SubRequest 'servicer' for <Function test_image_dockerfile_copy[2023.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470e08700>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cd2d0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470e093f0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________ ERROR at setup of test_image_dockerfile_copy[2024.04] _____________

request = <SubRequest 'servicer' for <Function test_image_dockerfile_copy[2024.04]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470e0bd00>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cd870>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470e0b400>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________ ERROR at setup of test_image_env[2023.12] ___________________

request = <SubRequest 'servicer' for <Function test_image_env[2023.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470e095a0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721ce830>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470e09b40>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________ ERROR at setup of test_image_env[2024.04] ___________________

request = <SubRequest 'servicer' for <Function test_image_env[2024.04]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f17e20>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647101b490>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f17c70>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________ ERROR at setup of test_image_gpu[2023.12] ___________________

request = <SubRequest 'servicer' for <Function test_image_gpu[2023.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470c509d0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f44c0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470c50790>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________ ERROR at setup of test_image_gpu[2024.04] ___________________

request = <SubRequest 'servicer' for <Function test_image_gpu[2024.04]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f175b0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647101ad40>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f16a70>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________ ERROR at setup of test_image_force_build[2023.12] _______________

request = <SubRequest 'servicer' for <Function test_image_force_build[2023.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470c508b0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647101ba30>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470c50670>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________ ERROR at setup of test_image_force_build[2024.04] _______________

request = <SubRequest 'servicer' for <Function test_image_force_build[2024.04]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470c53910>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647101b5b0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470c51240>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_workdir[2023.12] ____________________

request = <SubRequest 'servicer' for <Function test_workdir[2023.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470c52a70>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647101b490>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470c53e20>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_workdir[2024.04] ____________________

request = <SubRequest 'servicer' for <Function test_workdir[2024.04]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470e0ab90>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470c539a0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470e09360>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_image_build_snapshot __________________

request = <SubRequest 'servicer' for <Function test_image_build_snapshot>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721cd870>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f44c0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64721cd750>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_inside_ctx_unhydrated _________________

request = <SubRequest 'servicer' for <Function test_inside_ctx_unhydrated>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470c50040>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470f14d30>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470c50820>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________ ERROR at setup of test_inside_ctx_hydrated __________________

request = <SubRequest 'servicer' for <Function test_inside_ctx_hydrated>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647101ad40>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470c51ab0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647101b490>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______ ERROR at setup of test_get_modal_requirements_path[2023.12-3.11] _______

request = <SubRequest 'servicer' for <Function test_get_modal_requirements_path[2023.12-3.11]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470e08ee0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470c539a0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470e09120>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______ ERROR at setup of test_get_modal_requirements_path[2023.12-3.12] _______

request = <SubRequest 'servicer' for <Function test_get_modal_requirements_path[2023.12-3.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470e0b9a0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470cc0af0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470e09ea0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______ ERROR at setup of test_get_modal_requirements_path[2023.12-3.12.1] ______

request = <SubRequest 'servicer' for <Function test_get_modal_requirements_path[2023.12-3.12.1]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f14d30>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470cc0dc0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f17490>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____ ERROR at setup of test_get_modal_requirements_path[2023.12-3.12.1-gnu] ____

request = <SubRequest 'servicer' for <Function test_get_modal_requirements_path[2023.12-3.12.1-gnu]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470c539a0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470f175b0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470c50b80>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______ ERROR at setup of test_get_modal_requirements_path[2024.04-3.11] _______

request = <SubRequest 'servicer' for <Function test_get_modal_requirements_path[2024.04-3.11]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470f17520>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470c52950>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470f15ea0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______ ERROR at setup of test_get_modal_requirements_path[2024.04-3.12] _______

request = <SubRequest 'servicer' for <Function test_get_modal_requirements_path[2024.04-3.12]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470e09630>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470c51ab0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470e08310>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______ ERROR at setup of test_get_modal_requirements_path[2024.04-3.12.1] ______

request = <SubRequest 'servicer' for <Function test_get_modal_requirements_path[2024.04-3.12.1]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470c53b50>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710cdab0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470c50820>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____ ERROR at setup of test_get_modal_requirements_path[2024.04-3.12.1-gnu] ____

request = <SubRequest 'servicer' for <Function test_get_modal_requirements_path[2024.04-3.12.1-gnu]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64721cd2d0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470f17490>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647101b5b0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_image_builder_version _________________

request = <SubRequest 'servicer' for <Function test_image_builder_version>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470e0a5f0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470f14d30>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470e09090>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________ ERROR at setup of test_image_builder_supported_versions ____________

request = <SubRequest 'servicer' for <Function test_image_builder_supported_versions>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470c536d0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721ce830>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470c53e20>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________ ERROR at setup of test_image_stability_on_2023_12 _______________

request = <SubRequest 'servicer' for <Function test_image_stability_on_2023_12>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470e09bd0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721cd2d0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470e0b0a0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________________ ERROR at setup of test_live_reload ______________________

request = <SubRequest 'servicer' for <Coroutine test_live_reload>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470ed8040>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647101b5b0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470ed9000>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________ ERROR at setup of test_file_changes_trigger_reloads ______________

request = <SubRequest 'servicer' for <Function test_file_changes_trigger_reloads>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470c52950>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647101ba30>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470c51ab0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________________ ERROR at setup of test_no_change _______________________

request = <SubRequest 'servicer' for <Coroutine test_no_change>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470edb7f0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470c51240>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470ed8c10>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________________ ERROR at setup of test_heartbeats _______________________

request = <SubRequest 'servicer' for <Coroutine test_heartbeats>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470c53910>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470cc0c10>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470c53130>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_persistent_object ___________________

request = <SubRequest 'servicer' for <Function test_persistent_object>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470ed8940>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470c512d0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470ed8790>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________________ ERROR at setup of test_lookup_function ____________________

request = <SubRequest 'servicer' for <Function test_lookup_function>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470cc3910>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710cdab0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470e0b0a0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________________ ERROR at setup of test_webhook_lookup _____________________

request = <SubRequest 'servicer' for <Function test_webhook_lookup>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470ed8ee0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470f15ea0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470ed8670>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_deploy_exists _____________________

request = <SubRequest 'servicer' for <Function test_deploy_exists>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470edaef0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470cc2710>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470ed92d0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_create_if_missing ___________________

request = <SubRequest 'servicer' for <Function test_create_if_missing>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470ed8dc0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f44c0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470eda050>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________________ ERROR at setup of test_get_files _______________________

request = <SubRequest 'servicer' for <Coroutine test_get_files>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470ba91b0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470e08ca0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470ba9240>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_create_mount ______________________

request = <SubRequest 'servicer' for <Function test_create_mount>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470eda5f0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470f14d30>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470ed8550>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________ ERROR at setup of test_create_mount_file_errors ________________

request = <SubRequest 'servicer' for <Function test_create_mount_file_errors>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470baa4d0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470eda320>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470ba9ea0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________ ERROR at setup of test_from_local_python_packages _______________

request = <SubRequest 'servicer' for <Function test_from_local_python_packages>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470ed9090>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470e09120>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470ed9c60>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________________ ERROR at setup of test_stub_mounts ______________________

request = <SubRequest 'servicer' for <Function test_stub_mounts>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470bab760>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ed8dc0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470bab0a0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______ ERROR at setup of test_from_local_python_packages_missing_module _______

request = <SubRequest 'servicer' for <Function test_from_local_python_packages_missing_module>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470ba9990>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710cdab0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470ba9c60>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_mounted_files_script __________________

request = <SubRequest 'servicer' for <Function test_mounted_files_script>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470eda320>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470e09120>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470ed9e10>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________ ERROR at setup of test_mounted_files_serialized ________________

request = <SubRequest 'servicer' for <Function test_mounted_files_serialized>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470ba9090>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470f17640>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470babac0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_mounted_files_package _________________

request = <SubRequest 'servicer' for <Function test_mounted_files_package>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64703be170>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470baab90>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64703bcd30>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________ ERROR at setup of test_mounted_files_package_no_automount ___________

request = <SubRequest 'servicer' for <Function test_mounted_files_package_no_automount>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470318790>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470e0b130>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647031a170>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________ ERROR at setup of test_mounted_files_sys_prefix ________________

request = <SubRequest 'servicer' for <Function test_mounted_files_sys_prefix>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470319c60>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64710cdab0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470319990>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________ ERROR at setup of test_mounted_files_symlinked_python_install _________

tmp_path = PosixPath('/tmp/pytest-of-ubuntu/pytest-60/test_mounted_files_symlinked_p0')
repo_root = PosixPath('/home/ubuntu/modal-client')

    @pytest.fixture
    def symlinked_python_installation_venv_path(tmp_path, repo_root):
        # sets up a symlink to the python *installation* (not just the python binary)
        # and initialize the virtualenv using a path via that symlink
        # This makes the file paths of any stdlib modules use the symlinked path
        # instead of the original, which is similar to what some tools do (e.g. mise)
        # and has the potential to break automounting behavior, so we keep this
        # test as a regression test for that
        venv_path = tmp_path / "venv"
        actual_executable = Path(sys.executable).resolve()
        assert actual_executable.parent.name == "bin"
        python_install_dir = actual_executable.parent.parent
        # create a symlink to the python install *root*
        symlink_python_install = tmp_path / "python-install"
        symlink_python_install.symlink_to(python_install_dir)
    
        # use a python executable specified via the above symlink
        symlink_python_executable = symlink_python_install / "bin" / "python"
        # create a new venv
>       subprocess.check_call([symlink_python_executable, "-m", "venv", venv_path, "--copies"])

test/mounted_files_test.py:172: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/subprocess.py:364: in check_call
    retcode = call(*popenargs, **kwargs)
/usr/lib/python3.10/subprocess.py:345: in call
    with Popen(*popenargs, **kwargs) as p:
/usr/lib/python3.10/subprocess.py:971: in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Popen: returncode: 255 args: [PosixPath('/tmp/pytest-of-ubuntu/pytest-60/te...>
args = [PosixPath('/tmp/pytest-of-ubuntu/pytest-60/test_mounted_files_symlinked_p0/python-install/bin/python'), '-m', 'venv', PosixPath('/tmp/pytest-of-ubuntu/pytest-60/test_mounted_files_symlinked_p0/venv'), '--copies']
executable = b'/tmp/pytest-of-ubuntu/pytest-60/test_mounted_files_symlinked_p0/python-install/bin/python'
preexec_fn = None, close_fds = True, pass_fds = (), cwd = None, env = None
startupinfo = None, creationflags = 0, shell = False, p2cread = -1
p2cwrite = -1, c2pread = -1, c2pwrite = -1, errread = -1, errwrite = -1
restore_signals = True, gid = None, gids = None, uid = None, umask = -1
start_new_session = False

    def _execute_child(self, args, executable, preexec_fn, close_fds,
                       pass_fds, cwd, env,
                       startupinfo, creationflags, shell,
                       p2cread, p2cwrite,
                       c2pread, c2pwrite,
                       errread, errwrite,
                       restore_signals,
                       gid, gids, uid, umask,
                       start_new_session):
        """Execute program (POSIX version)"""
    
        if isinstance(args, (str, bytes)):
            args = [args]
        elif isinstance(args, os.PathLike):
            if shell:
                raise TypeError('path-like args is not allowed when '
                                'shell is true')
            args = [args]
        else:
            args = list(args)
    
        if shell:
            # On Android the default shell is at '/system/bin/sh'.
            unix_shell = ('/system/bin/sh' if
                      hasattr(sys, 'getandroidapilevel') else '/bin/sh')
            args = [unix_shell, "-c"] + args
            if executable:
                args[0] = executable
    
        if executable is None:
            executable = args[0]
    
        sys.audit("subprocess.Popen", executable, args, cwd, env)
    
        if (_USE_POSIX_SPAWN
                and os.path.dirname(executable)
                and preexec_fn is None
                and not close_fds
                and not pass_fds
                and cwd is None
                and (p2cread == -1 or p2cread > 2)
                and (c2pwrite == -1 or c2pwrite > 2)
                and (errwrite == -1 or errwrite > 2)
                and not start_new_session
                and gid is None
                and gids is None
                and uid is None
                and umask < 0):
            self._posix_spawn(args, executable, env, restore_signals,
                              p2cread, p2cwrite,
                              c2pread, c2pwrite,
                              errread, errwrite)
            return
    
        orig_executable = executable
    
        # For transferring possible exec failure from child to parent.
        # Data format: "exception name:hex errno:description"
        # Pickle is not used; it is complex and involves memory allocation.
        errpipe_read, errpipe_write = os.pipe()
        # errpipe_write must not be in the standard io 0, 1, or 2 fd range.
        low_fds_to_close = []
        while errpipe_write < 3:
            low_fds_to_close.append(errpipe_write)
            errpipe_write = os.dup(errpipe_write)
        for low_fd in low_fds_to_close:
            os.close(low_fd)
        try:
            try:
                # We must avoid complex work that could involve
                # malloc or free in the child process to avoid
                # potential deadlocks, thus we do all this here.
                # and pass it to fork_exec()
    
                if env is not None:
                    env_list = []
                    for k, v in env.items():
                        k = os.fsencode(k)
                        if b'=' in k:
                            raise ValueError("illegal environment variable name")
                        env_list.append(k + b'=' + os.fsencode(v))
                else:
                    env_list = None  # Use execv instead of execve.
                executable = os.fsencode(executable)
                if os.path.dirname(executable):
                    executable_list = (executable,)
                else:
                    # This matches the behavior of os._execvpe().
                    executable_list = tuple(
                        os.path.join(os.fsencode(dir), executable)
                        for dir in os.get_exec_path(env))
                fds_to_keep = set(pass_fds)
                fds_to_keep.add(errpipe_write)
                self.pid = _posixsubprocess.fork_exec(
                        args, executable_list,
                        close_fds, tuple(sorted(map(int, fds_to_keep))),
                        cwd, env_list,
                        p2cread, p2cwrite, c2pread, c2pwrite,
                        errread, errwrite,
                        errpipe_read, errpipe_write,
                        restore_signals, start_new_session,
                        gid, gids, uid, umask,
                        preexec_fn)
                self._child_created = True
            finally:
                # be sure the FD is closed no matter what
                os.close(errpipe_write)
    
            self._close_pipe_fds(p2cread, p2cwrite,
                                 c2pread, c2pwrite,
                                 errread, errwrite)
    
            # Wait for exec to fail or succeed; possibly raising an
            # exception (limited in size)
            errpipe_data = bytearray()
            while True:
                part = os.read(errpipe_read, 50000)
                errpipe_data += part
                if not part or len(errpipe_data) > 50000:
                    break
        finally:
            # be sure the FD is closed no matter what
            os.close(errpipe_read)
    
        if errpipe_data:
            try:
                pid, sts = os.waitpid(self.pid, 0)
                if pid == self.pid:
                    self._handle_exitstatus(sts)
                else:
                    self.returncode = sys.maxsize
            except ChildProcessError:
                pass
    
            try:
                exception_name, hex_errno, err_msg = (
                        errpipe_data.split(b':', 2))
                # The encoding here should match the encoding
                # written in by the subprocess implementations
                # like _posixsubprocess
                err_msg = err_msg.decode()
            except ValueError:
                exception_name = b'SubprocessError'
                hex_errno = b'0'
                err_msg = 'Bad exception data from child: {!r}'.format(
                              bytes(errpipe_data))
            child_exception_type = getattr(
                    builtins, exception_name.decode('ascii'),
                    SubprocessError)
            if issubclass(child_exception_type, OSError) and hex_errno:
                errno_num = int(hex_errno, 16)
                child_exec_never_called = (err_msg == "noexec")
                if child_exec_never_called:
                    err_msg = ""
                    # The error must be from chdir(cwd).
                    err_filename = cwd
                else:
                    err_filename = orig_executable
                if errno_num != 0:
                    err_msg = os.strerror(errno_num)
>               raise child_exception_type(errno_num, err_msg, err_filename)
E               FileNotFoundError: [Errno 2] No such file or directory: PosixPath('/tmp/pytest-of-ubuntu/pytest-60/test_mounted_files_symlinked_p0/python-install/bin/python')

/usr/lib/python3.10/subprocess.py:1863: FileNotFoundError
_________________ ERROR at setup of test_mounted_files_config __________________

request = <SubRequest 'servicer' for <Function test_mounted_files_config>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647031a680>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64703180d0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647031ba30>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________ ERROR at setup of test_e2e_modal_run_py_file_mounts ______________

request = <SubRequest 'servicer' for <Function test_e2e_modal_run_py_file_mounts>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470ed9c60>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470edbb50>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470eda710>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________ ERROR at setup of test_e2e_modal_run_py_module_mounts _____________

request = <SubRequest 'servicer' for <Function test_e2e_modal_run_py_module_mounts>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470319990>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ed8d30>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470319f30>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________ ERROR at setup of test_mounts_are_not_traversed_on_declaration ________

request = <SubRequest 'servicer' for <Function test_mounts_are_not_traversed_on_declaration>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470ba8ee0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ed9e10>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470baa3b0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_mount_dedupe ______________________

request = <SubRequest 'servicer' for <Function test_mount_dedupe>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470ed8dc0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ed9f30>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647031a320>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_mount_dedupe_explicit _________________

request = <SubRequest 'servicer' for <Function test_mount_dedupe_explicit>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470ba91b0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ed85e0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470ba8e50>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________ ERROR at setup of test_pdm_cache_automount_exclude ______________

request = <SubRequest 'servicer' for <Function test_pdm_cache_automount_exclude>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470bab880>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ba9e10>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470babd90>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________ ERROR at setup of test_mount_directory_with_symlinked_file __________

request = <SubRequest 'servicer' for <Function test_mount_directory_with_symlinked_file>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470ed9fc0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470eda0e0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470ed85e0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________ ERROR at setup of test_network_file_system_files _______________

request = <SubRequest 'servicer' for <Function test_network_file_system_files>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647031ad40>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ed9c60>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470319900>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________ ERROR at setup of test_network_file_system_handle_single_file _________

request = <SubRequest 'servicer' for <Function test_network_file_system_handle_single_file>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470baadd0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64703bf1c0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470babc70>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________ ERROR at setup of test_network_file_system_handle_dir _____________

request = <SubRequest 'servicer' for <Coroutine test_network_file_system_handle_dir>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470ed8e50>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ed9fc0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470ed9f30>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________ ERROR at setup of test_network_file_system_handle_big_file __________

request = <SubRequest 'servicer' for <Coroutine test_network_file_system_handle_big_file>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64703bd7e0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ed85e0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64703bd900>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________________ ERROR at setup of test_old_syntax _______________________

request = <SubRequest 'servicer' for <Function test_old_syntax>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64703bf250>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64703be170>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64703bf760>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________________ ERROR at setup of test_redeploy ________________________

request = <SubRequest 'servicer' for <Function test_redeploy>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64703bcdc0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64703bef80>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64703be8c0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________________ ERROR at setup of test_read_file _______________________

request = <SubRequest 'servicer' for <Function test_read_file>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470baaef0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470baa710>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470babeb0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________________ ERROR at setup of test_write_file _______________________

request = <SubRequest 'servicer' for <Function test_write_file>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64703be9e0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ba91b0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64703bd510>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________________ ERROR at setup of test_persisted _______________________

request = <SubRequest 'servicer' for <Function test_persisted>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64703bdc60>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ba9870>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64703bf2e0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_nfs_ephemeral _____________________

request = <SubRequest 'servicer' for <Function test_nfs_ephemeral>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470319a20>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647031a9e0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647031a440>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________ ERROR at setup of test_nfs_lazy_hydration_from_name ______________

request = <SubRequest 'servicer' for <Function test_nfs_lazy_hydration_from_name>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64703bf640>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64703bedd0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64703becb0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_async_factory _____________________

request = <SubRequest 'servicer' for <Coroutine test_async_factory>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470eda710>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64721f44c0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64703bcdc0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_new_hydrated ______________________

request = <SubRequest 'servicer' for <Function test_new_hydrated>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470318430>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ed9e10>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647031ba30>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________________ ERROR at setup of test_queue _________________________

request = <SubRequest 'servicer' for <Function test_queue>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64703be560>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470319a20>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64703bcf70>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________________ ERROR at setup of test_queue_ephemeral ____________________

request = <SubRequest 'servicer' for <Function test_queue_ephemeral>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470eda320>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ed8dc0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470ed9e10>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________ ERROR at setup of test_queue_blocking_put[0.02-1-100] _____________

request = <SubRequest 'servicer' for <Function test_queue_blocking_put[0.02-1-100]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470318820>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ed9fc0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470319f30>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________ ERROR at setup of test_queue_blocking_put[10.0-0-0] ______________

request = <SubRequest 'servicer' for <Function test_queue_blocking_put[10.0-0-0]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647031ad40>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ed8940>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470318dc0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________ ERROR at setup of test_queue_blocking_put[0.0-1-100] _____________

request = <SubRequest 'servicer' for <Function test_queue_blocking_put[0.0-1-100]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64703be5f0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ed85e0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64703bf760>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________ ERROR at setup of test_queue_blocking_put[None-0-0] ______________

request = <SubRequest 'servicer' for <Function test_queue_blocking_put[None-0-0]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64703bfd00>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64703bfac0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64703bedd0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_queue_nonblocking_put _________________

request = <SubRequest 'servicer' for <Function test_queue_nonblocking_put>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64703bc0d0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64703be680>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64703bcb80>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_queue_deploy ______________________

request = <SubRequest 'servicer' for <Function test_queue_deploy>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470bab910>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ba9e10>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470baa440>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________ ERROR at setup of test_queue_lazy_hydrate_from_name ______________

request = <SubRequest 'servicer' for <Function test_queue_lazy_hydrate_from_name>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64703be9e0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64703bf880>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64703bdab0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________________ ERROR at setup of test_retries ________________________

request = <SubRequest 'servicer' for <Function test_retries>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64703bf250>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64703bcd30>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64703bf910>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________________ ERROR at setup of test_run_stub ________________________

request = <SubRequest 'servicer' for <Function test_run_stub>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470318af0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647031af80>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647031a950>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________ ERROR at setup of test_run_stub_unauthenticated ________________

request = <SubRequest 'servicer' for <Function test_run_stub_unauthenticated>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470edbeb0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470319360>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470ed9e10>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________ ERROR at setup of test_run_stub_profile_env_with_refs _____________

request = <SubRequest 'servicer' for <Function test_run_stub_profile_env_with_refs>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470318dc0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ed9c60>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647031b130>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________ ERROR at setup of test_run_stub_custom_env_with_refs _____________

request = <SubRequest 'servicer' for <Function test_run_stub_custom_env_with_refs>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647031a320>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ed8e50>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470319870>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_spawn_sandbox _____________________

request = <SubRequest 'servicer' for <Function test_spawn_sandbox>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64703bf910>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470eda320>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64703bcd30>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_sandbox_mount _____________________

request = <SubRequest 'servicer' for <Function test_sandbox_mount>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64703bf250>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ed8d30>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64703bdcf0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_sandbox_image _____________________

request = <SubRequest 'servicer' for <Function test_sandbox_image>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470319870>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ed8dc0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64703180d0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________________ ERROR at setup of test_sandbox_secret _____________________

request = <SubRequest 'servicer' for <Function test_sandbox_secret>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64703bc0d0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647031bac0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64703bf370>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________________ ERROR at setup of test_sandbox_nfs ______________________

request = <SubRequest 'servicer' for <Function test_sandbox_nfs>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64703be710>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470319cf0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64703bf910>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
____________________ ERROR at setup of test_sandbox_from_id ____________________

request = <SubRequest 'servicer' for <Function test_sandbox_from_id>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470babe20>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470bab910>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470ba8ee0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_sandbox_terminate ___________________

request = <SubRequest 'servicer' for <Function test_sandbox_terminate>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470ed9fc0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ba9bd0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470edbeb0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________ ERROR at setup of test_sandbox_stdin_async __________________

request = <SubRequest 'servicer' for <Coroutine test_sandbox_stdin_async>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64703be9e0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470baab00>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64703bc310>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_sandbox_stdin _____________________

request = <SubRequest 'servicer' for <Function test_sandbox_stdin>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470319ea0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647031ae60>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470319d80>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________ ERROR at setup of test_sandbox_stdin_invalid_write ______________

request = <SubRequest 'servicer' for <Function test_sandbox_stdin_invalid_write>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470bab6d0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64703197e0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470baaef0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________ ERROR at setup of test_sandbox_stdin_write_after_eof _____________

request = <SubRequest 'servicer' for <Function test_sandbox_stdin_write_after_eof>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64703bf6d0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64703bcc10>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64703bc0d0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_sandbox_async_for ___________________

request = <SubRequest 'servicer' for <Coroutine test_sandbox_async_for>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470babc70>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64703bef80>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470ba9990>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________________ ERROR at setup of test_schedule ________________________

request = <SubRequest 'servicer' for <Function test_schedule>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470ed8e50>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64703bd240>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470edbeb0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________ ERROR at setup of test_scheduler_placement __________________

request = <SubRequest 'servicer' for <Function test_scheduler_placement>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64703bd870>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ed85e0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64703be9e0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_secret_from_dict ____________________

request = <SubRequest 'servicer' for <Function test_secret_from_dict>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647031a050>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64703bf130>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647031a950>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________ ERROR at setup of test_secret_from_dotenv ___________________

request = <SubRequest 'servicer' for <Function test_secret_from_dotenv>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64703bcdc0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470eda710>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64703bef80>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________ ERROR at setup of test_secret_from_local_environ _______________

request = <SubRequest 'servicer' for <Function test_secret_from_local_environ>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470babd90>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ed9090>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470ba9d80>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_secret_from_dict_none _________________

request = <SubRequest 'servicer' for <Function test_secret_from_dict_none>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64703be320>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64703be3b0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64703bcb80>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_secret_from_name ____________________

request = <SubRequest 'servicer' for <Function test_secret_from_name>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470318a60>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470eda680>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470319ea0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________________ ERROR at setup of test_roundtrip _______________________

request = <SubRequest 'servicer' for <Coroutine test_roundtrip>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470ba8ee0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647031a320>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470babd90>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________ ERROR at setup of test_stub_composition_includes_all_functions ________

request = <SubRequest 'servicer' for <Function test_stub_composition_includes_all_functions>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647029f0a0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647029ee60>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647029f520>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________________ ERROR at setup of test_kwargs _________________________

request = <SubRequest 'servicer' for <Coroutine test_kwargs>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647031bf40>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470bab910>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470318670>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________________ ERROR at setup of test_attrs _________________________

request = <SubRequest 'servicer' for <Coroutine test_attrs>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470bab6d0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647031ae60>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470ba9c60>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_stub_type_validation __________________

request = <SubRequest 'servicer' for <Coroutine test_stub_type_validation>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64703bc8b0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ba8ca0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64703be9e0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________________ ERROR at setup of test_redeploy ________________________

request = <SubRequest 'servicer' for <Coroutine test_redeploy>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470ba9e10>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f64703bfbe0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470bab6d0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________ ERROR at setup of test_create_object_exception ________________

request = <SubRequest 'servicer' for <Function test_create_object_exception>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64703bc0d0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ba9bd0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64703bdcf0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________ ERROR at setup of test_deploy_falls_back_to_app_name _____________

request = <SubRequest 'servicer' for <Function test_deploy_falls_back_to_app_name>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470ed85e0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470baadd0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470ed9fc0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______ ERROR at setup of test_deploy_uses_deployment_name_if_specified ________

request = <SubRequest 'servicer' for <Function test_deploy_uses_deployment_name_if_specified>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64703be3b0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ed88b0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64703be8c0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________________ ERROR at setup of test_run_state _______________________

request = <SubRequest 'servicer' for <Function test_run_state>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64700fcb80>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647031b0a0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64700fe170>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_deploy_state ______________________

request = <SubRequest 'servicer' for <Function test_deploy_state>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64700ff1c0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ed9c60>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64700fd990>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_detach_state ______________________

request = <SubRequest 'servicer' for <Function test_detach_state>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64700ffd00>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ed9fc0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64700ff2e0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_grpc_protocol _____________________

request = <SubRequest 'servicer' for <Coroutine test_grpc_protocol>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64700ffac0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647031a440>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64700ff760>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________ ERROR at setup of test_registered_web_endpoints ________________

request = <SubRequest 'servicer' for <Function test_registered_web_endpoints>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647029db40>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647031a050>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647029f5b0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________ ERROR at setup of test_redeploy_delete_objects ________________

request = <SubRequest 'servicer' for <Function test_redeploy_delete_objects>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64700fe9e0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647031b130>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64700ff490>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________________ ERROR at setup of test_unhydrate _______________________

request = <SubRequest 'servicer' for <Coroutine test_unhydrate>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647029f010>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647029e320>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647029c790>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________ ERROR at setup of test_keyboard_interrupt ___________________

request = <SubRequest 'servicer' for <Function test_keyboard_interrupt>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647029f7f0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647029f250>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647029d1b0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_deploy_disconnect ___________________

request = <SubRequest 'servicer' for <Coroutine test_deploy_disconnect>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f64700ffd00>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ba93f0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f64700fd6c0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________ ERROR at setup of test_redeploy_from_name_change _______________

request = <SubRequest 'servicer' for <Function test_redeploy_from_name_change>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6470ed85e0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647031ad40>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6470ed9fc0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______ ERROR at setup of test_hydrated_other_app_object_gets_referenced _______

request = <SubRequest 'servicer' for <Function test_hydrated_other_app_object_gets_referenced>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647029f250>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470318dc0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647029e5f0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_token_flow_server ___________________

request = <SubRequest 'servicer' for <Coroutine test_token_flow_server>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6463f7a560>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6463fa0820>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6463f7a0e0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________ ERROR at setup of test_tunnel_outside_container ________________

request = <SubRequest 'servicer' for <Function test_tunnel_outside_container>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6463eae290>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6463fa0670>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6463eae3b0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_invalid_port_numbers __________________

request = <SubRequest 'unix_servicer' for <Function test_invalid_port_numbers>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6463f79630>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6470ed85e0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6463f79ea0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_create_tunnel _____________________

request = <SubRequest 'unix_servicer' for <Function test_create_tunnel>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6463eaf2e0>}
unittest = False, func = <function unix_servicer at 0x7f647455c670>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6463f7a680>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6463eaf370>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1344: in unix_servicer
    async with servicer_factory(path=path) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_volume_mount ______________________

request = <SubRequest 'servicer' for <Function test_volume_mount>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647029cca0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647029fb50>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647029c160>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_________________ ERROR at setup of test_volume_commit[False] __________________

request = <SubRequest 'servicer' for <Function test_volume_commit[False]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6463e7e170>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647029d1b0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6463e7e950>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________ ERROR at setup of test_volume_commit[True] __________________

request = <SubRequest 'servicer' for <Function test_volume_commit[True]>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647029cb80>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6463fa0820>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647029f010>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________________ ERROR at setup of test_volume_get _______________________

request = <SubRequest 'servicer' for <Coroutine test_volume_get>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6463e7cca0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6463f7a050>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6463e7c700>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_volume_reload _____________________

request = <SubRequest 'servicer' for <Function test_volume_reload>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6463e7e680>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6463fa0670>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6463e7f7f0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________________ ERROR at setup of test_redeploy ________________________

request = <SubRequest 'servicer' for <Function test_redeploy>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6463e7d2d0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6463fa0790>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6463e7ca60>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________ ERROR at setup of test_volume_batch_upload __________________

request = <SubRequest 'servicer' for <Coroutine test_volume_batch_upload>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647029cdc0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647029cc10>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647029eb90>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________ ERROR at setup of test_volume_batch_upload_force _______________

request = <SubRequest 'servicer' for <Coroutine test_volume_batch_upload_force>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6463e7cd30>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6463e7e440>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6463e7d3f0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________ ERROR at setup of test_volume_upload_removed_file _______________

request = <SubRequest 'servicer' for <Coroutine test_volume_upload_removed_file>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647029cca0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6463f7a560>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647029ca60>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________ ERROR at setup of test_volume_upload_large_file ________________

request = <SubRequest 'servicer' for <Coroutine test_volume_upload_large_file>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6463e7fd00>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647031ab00>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6463e7d7e0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
______________ ERROR at setup of test_volume_upload_file_timeout _______________

request = <SubRequest 'servicer' for <Coroutine test_volume_upload_file_timeout>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647029e050>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6463f79f30>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647029fd00>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_volume_copy_1 _____________________

request = <SubRequest 'servicer' for <Coroutine test_volume_copy_1>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647029f250>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6463f79c60>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647029ca60>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ ERROR at setup of test_volume_copy_2 _____________________

request = <SubRequest 'servicer' for <Coroutine test_volume_copy_2>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6463e7fd00>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6463f7a680>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6463e7e5f0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________________ ERROR at setup of test_persisted _______________________

request = <SubRequest 'servicer' for <Function test_persisted>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647029c160>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647029dab0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647029cf70>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________________ ERROR at setup of test_ephemeral _______________________

request = <SubRequest 'servicer' for <Function test_ephemeral>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6463fa05e0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647029c940>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6463fa0820>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________ ERROR at setup of test_lazy_hydration_from_named _______________

request = <SubRequest 'servicer' for <Function test_lazy_hydration_from_named>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6463e7d7e0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647029e290>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6463e7d360>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________________ ERROR at setup of test_webhook ________________________

request = <SubRequest 'servicer' for <Coroutine test_webhook>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647029fd00>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6463f7a680>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647029db40>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________ ERROR at setup of test_webhook_forgot_function ________________

request = <SubRequest 'servicer' for <Coroutine test_webhook_forgot_function>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647029f2e0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6463dc3010>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647029f760>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________ ERROR at setup of test_webhook_decorator_in_wrong_order ____________

request = <SubRequest 'servicer' for <Coroutine test_webhook_decorator_in_wrong_order>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6463e7e830>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f647029ce50>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6463e7d360>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_______________________ ERROR at setup of test_asgi_wsgi _______________________

request = <SubRequest 'servicer' for <Coroutine test_asgi_wsgi>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f6463e7f130>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6463ea7760>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f6463e7dea0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ ERROR at setup of test_positional_method ___________________

request = <SubRequest 'servicer' for <Function test_positional_method>>
kwargs = {'servicer_factory': <function servicer_factory.<locals>.create_server at 0x7f647029f2e0>}
unittest = False, func = <function servicer at 0x7f647455c550>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7f6463ea6cb0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7f647029cca0>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        unittest = False if pytest.version_tuple >= (8, 2) else fixturedef.unittest
        func = _perhaps_rebind_fixture_func(fixture, request.instance, unittest)
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
../.local/lib/python3.10/site-packages/pytest_asyncio/plugin.py:326: in setup
    res = await gen_obj.__anext__()
test/conftest.py:1335: in servicer
    async with servicer_factory(host="0.0.0.0", port=port) as servicer:
/usr/lib/python3.10/contextlib.py:199: in __aenter__
    return await anext(self.gen)
test/conftest.py:1323: in create_server
    await start_servicer.aio()
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
=================================== FAILURES ===================================
___________________________ test_client_dns_failure ____________________________

    @pytest.mark.asyncio
    @pytest.mark.timeout(TEST_TIMEOUT)
    async def test_client_dns_failure():
        with pytest.raises(ConnectionError) as excinfo:
>           async with Client("https://xyz.invalid", api_pb2.CLIENT_TYPE_CONTAINER, None):

test/client_test.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________________ test_client_connection_failure ________________________

    @pytest.mark.asyncio
    @pytest.mark.timeout(TEST_TIMEOUT)
    @skip_windows_unix_socket
    async def test_client_connection_failure():
        with pytest.raises(ConnectionError) as excinfo:
>           async with Client("https://localhost:443", api_pb2.CLIENT_TYPE_CONTAINER, None):

test/client_test.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
__________________ test_client_connection_failure_unix_socket __________________

    @pytest.mark.asyncio
    @pytest.mark.timeout(TEST_TIMEOUT)
    @skip_windows_unix_socket
    async def test_client_connection_failure_unix_socket():
        with pytest.raises(ConnectionError) as excinfo:
>           async with Client("unix:/tmp/xyz.txt", api_pb2.CLIENT_TYPE_CONTAINER, None):

test/client_test.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/async_wrap.py:30: in wrapper
    return await user_wrapper(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:329: in _run_function_async
    c_fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
___________________ test_enter_decorator_without_parentheses ___________________

    def test_enter_decorator_without_parentheses():
        stub = Stub()
    
        @enter
>       def my_function():

test/decorator_test.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:422: in f_wrapped
    res = f(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_warn_parentheses_missing = <function test_enter_decorator_without_parentheses.<locals>.my_function at 0x7f64710c3c70>

    def _enter(
        _warn_parentheses_missing=None,
        *,
        snap: bool = False,
    ) -> Callable[[Union[Callable[[Any], Any], _PartialFunction]], _PartialFunction]:
        """Decorator for methods which should be executed when a new container is started.
    
        See the [lifeycle function guide](https://modal.com/docs/guide/lifecycle-functions#enter) for more information."""
        if _warn_parentheses_missing:
>           raise InvalidError("Positional arguments are not allowed. Did you forget parentheses? Suggestion: `@enter()`.")
E           modal.exception.InvalidError: Positional arguments are not allowed. Did you forget parentheses? Suggestion: `@enter()`.

../.local/lib/python3.10/site-packages/modal/partial_function.py:461: InvalidError
______________________________ test_not_hydrated _______________________________

    def test_not_hydrated():
        with pytest.raises(ExecutionError):
>           assert foo.remote(2, 4) == 20

test/function_test.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:531: in proxy_method
    return wrapped_method(instance, *args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/combined_types.py:26: in __call__
    return self._func(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:450: in f_wrapped
    return self._run_function_sync(res, interface, f)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:306: in _run_function_sync
    fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
________________________ test_call_unhydrated_function _________________________

    def test_call_unhydrated_function():
        with pytest.raises(ExecutionError, match="hydrated"):
>           foo.remote(123)

test/function_test.py:537: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:531: in proxy_method
    return wrapped_method(instance, *args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/combined_types.py:26: in __call__
    return self._func(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:450: in f_wrapped
    return self._run_function_sync(res, interface, f)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:306: in _run_function_sync
    fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________________ test_chained_entries _____________________________

test_dir = PosixPath('/home/ubuntu/modal-client/test')

    def test_chained_entries(test_dir):
        a_txt = str(test_dir / "a.txt")
        b_txt = str(test_dir / "b.txt")
        with open(a_txt, "w") as f:
            f.write("A")
        with open(b_txt, "w") as f:
            f.write("B")
        mount = Mount.from_local_file(a_txt).add_local_file(b_txt)
        entries = mount.entries
        assert len(entries) == 2
>       files = [file for file in Mount._get_files(entries)]

test/mount_test.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
test/mount_test.py:153: in <listcomp>
    files = [file for file in Mount._get_files(entries)]
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:344: in _run_generator_sync
    value = self._run_function_sync(gen.asend(value), interface, original_func)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:306: in _run_function_sync
    fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________________ test_run_function_without_app_error ______________________

    def test_run_function_without_app_error():
        stub = Stub()
        dummy_modal = stub.function()(dummy)
    
        with pytest.raises(ExecutionError) as excinfo:
>           dummy_modal.remote()

test/stub_test.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:531: in proxy_method
    return wrapped_method(instance, *args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/combined_types.py:26: in __call__
    return self._func(*args, **kwargs)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:450: in f_wrapped
    return self._run_function_sync(res, interface, f)
../.local/lib/python3.10/site-packages/synchronicity/synchronizer.py:306: in _run_function_sync
    fut = asyncio.run_coroutine_threadsafe(coro, loop)
/usr/lib/python3.10/asyncio/tasks.py:892: in run_coroutine_threadsafe
    loop.call_soon_threadsafe(callback)
/usr/lib/python3.10/asyncio/base_events.py:798: in call_soon_threadsafe
    self._check_closed()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_UnixSelectorEventLoop running=False closed=True debug=False>

    def _check_closed(self):
        if self._closed:
>           raise RuntimeError('Event loop is closed')
E           RuntimeError: Event loop is closed

/usr/lib/python3.10/asyncio/base_events.py:515: RuntimeError
_____________ TestEnterDecorator.test_function_without_parentheses _____________

self = <test_enter_decorator.TestEnterDecorator testMethod=test_function_without_parentheses>

    def test_function_without_parentheses(self):
        # Test the behavior of the 'enter' decorator when it is used without parentheses
        print("Running test_function_without_parentheses")
        print(f"Type of enter before decoration: {type(enter)}")
        @enter
>       def dummy_function():

test_enter_decorator.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_warn_parentheses_missing = <function TestEnterDecorator.test_function_without_parentheses.<locals>.dummy_function at 0x7f6463ea4a60>

    def _enter(
        _warn_parentheses_missing=None,
        *,
        snap: bool = False,
    ) -> Callable[[Union[Callable[[Any], Any], _PartialFunction]], _PartialFunction]:
        """Decorator for methods which should be executed when a new container is started.
    
        See the [lifeycle function guide](https://modal.com/docs/guide/lifecycle-functions#enter) for more information."""
        if _warn_parentheses_missing:
>           raise InvalidError("Positional arguments are not allowed. Did you forget parentheses? Suggestion: `@enter()`.")
E           modal.exception.InvalidError: Positional arguments are not allowed. Did you forget parentheses? Suggestion: `@enter()`.

../.local/lib/python3.10/site-packages/modal/partial_function.py:461: InvalidError
=============================== warnings summary ===============================
../.local/lib/python3.10/site-packages/_pytest/config/__init__.py:1439
  /home/ubuntu/.local/lib/python3.10/site-packages/_pytest/config/__init__.py:1439: PytestConfigWarning: Unknown config option: timeout
  
    self._warn_or_fail_if_strict(f"Unknown config option: {key}\n")

test/client_test.py:44
  /home/ubuntu/modal-client/test/client_test.py:44: PytestUnknownMarkWarning: Unknown pytest.mark.timeout - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.timeout(TEST_TIMEOUT)

test/client_test.py:53
  /home/ubuntu/modal-client/test/client_test.py:53: PytestUnknownMarkWarning: Unknown pytest.mark.timeout - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.timeout(TEST_TIMEOUT)

test/client_test.py:63
  /home/ubuntu/modal-client/test/client_test.py:63: PytestUnknownMarkWarning: Unknown pytest.mark.timeout - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.timeout(TEST_TIMEOUT)

test/client_test.py:73
  /home/ubuntu/modal-client/test/client_test.py:73: PytestUnknownMarkWarning: Unknown pytest.mark.timeout - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.timeout(TEST_TIMEOUT)

test/client_test.py:87
  /home/ubuntu/modal-client/test/client_test.py:87: PytestUnknownMarkWarning: Unknown pytest.mark.timeout - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.timeout(TEST_TIMEOUT)

test/container_test.py:1068
  /home/ubuntu/modal-client/test/container_test.py:1068: PytestUnknownMarkWarning: Unknown pytest.mark.timeout - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.timeout(10.0)

test/function_test.py:54
  /home/ubuntu/modal-client/test/function_test.py:54: PytestUnknownMarkWarning: Unknown pytest.mark.timeout - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.timeout(120)

test/notebook_test.py:13
  /home/ubuntu/modal-client/test/notebook_test.py:13: UserWarning: failed importing nbclient
    warnings.warn("failed importing nbclient")

test/stub_test.py:102
  /home/ubuntu/modal-client/test/stub_test.py:102: PytestUnknownMarkWarning: Unknown pytest.mark.timeout - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.timeout(5)

test/test_asgi_wrapper.py:70
  /home/ubuntu/modal-client/test/test_asgi_wrapper.py:70: PytestUnknownMarkWarning: Unknown pytest.mark.timeout - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.timeout(1)

test/test_asgi_wrapper.py:88
  /home/ubuntu/modal-client/test/test_asgi_wrapper.py:88: PytestUnknownMarkWarning: Unknown pytest.mark.timeout - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.timeout(1)

test/test_asgi_wrapper.py:118
  /home/ubuntu/modal-client/test/test_asgi_wrapper.py:118: PytestUnknownMarkWarning: Unknown pytest.mark.timeout - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.timeout(1)

test/test_asgi_wrapper.py:140
  /home/ubuntu/modal-client/test/test_asgi_wrapper.py:140: PytestUnknownMarkWarning: Unknown pytest.mark.timeout - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.timeout(10)

test/test_asgi_wrapper.py:164
  /home/ubuntu/modal-client/test/test_asgi_wrapper.py:164: PytestUnknownMarkWarning: Unknown pytest.mark.timeout - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.timeout(2)

test/cli_imports_test.py::test_import_object[dir_structure6-mod-_Stub]
test/container_test.py::test_raises_base_exception
test/container_test.py::test_cls_web_endpoint
test/container_test.py::test_call_function_that_calls_function
test/container_test.py::test_container_heartbeat_survives_grpc_deadlines
test/function_test.py::test_serialize_deserialize_function_handle
  /usr/lib/python3.10/pathlib.py:69: RuntimeWarning: coroutine 'Synchronizer._wrap_check_async_leakage.<locals>.coro_wrapped' was never awaited
    for x in reversed(rel.split(sep)):
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

test/cli_imports_test.py::test_import_object[dir_structure6-mod-_Stub]
test/container_test.py::test_raises_base_exception
test/container_test.py::test_cls_web_endpoint
test/container_test.py::test_call_function_that_calls_function
test/container_test.py::test_container_heartbeat_survives_grpc_deadlines
test/function_test.py::test_serialize_deserialize_function_handle
  /usr/lib/python3.10/pathlib.py:69: RuntimeWarning: coroutine 'wrap_coro_exception.<locals>.coro_wrapped' was never awaited
    for x in reversed(rel.split(sep)):
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

test/cli_imports_test.py::test_import_object[dir_structure6-mod-_Stub]
test/container_test.py::test_raises_base_exception
test/container_test.py::test_cls_web_endpoint
test/container_test.py::test_call_function_that_calls_function
test/container_test.py::test_container_heartbeat_survives_grpc_deadlines
test/function_test.py::test_serialize_deserialize_function_handle
  /usr/lib/python3.10/pathlib.py:69: RuntimeWarning: coroutine 'servicer_factory.<locals>.create_server.<locals>._start_servicer' was never awaited
    for x in reversed(rel.split(sep)):
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

test/stub_test.py::test_run_function_without_app_error
  /usr/lib/python3.10/importlib/metadata/__init__.py:791: RuntimeWarning: coroutine 'Synchronizer._wrap_check_async_leakage.<locals>.coro_wrapped' was never awaited
    return self.zip_children()
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

test/stub_test.py::test_run_function_without_app_error
  /usr/lib/python3.10/importlib/metadata/__init__.py:791: RuntimeWarning: coroutine 'wrap_coro_exception.<locals>.coro_wrapped' was never awaited
    return self.zip_children()
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

test/stub_test.py::test_run_function_without_app_error
  /usr/lib/python3.10/importlib/metadata/__init__.py:791: RuntimeWarning: coroutine 'servicer_factory.<locals>.create_server.<locals>._start_servicer' was never awaited
    return self.zip_children()
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

test/webhook_test.py::test_webhook_generator
  /usr/lib/python3.10/zipfile.py:1230: RuntimeWarning: coroutine 'Synchronizer._wrap_check_async_leakage.<locals>.coro_wrapped' was never awaited
    self.NameToInfo = {}    # Find file info given name
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

test/webhook_test.py::test_webhook_generator
  /usr/lib/python3.10/zipfile.py:1230: RuntimeWarning: coroutine 'wrap_coro_exception.<locals>.coro_wrapped' was never awaited
    self.NameToInfo = {}    # Find file info given name
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

test/webhook_test.py::test_webhook_generator
  /usr/lib/python3.10/zipfile.py:1230: RuntimeWarning: coroutine 'servicer_factory.<locals>.create_server.<locals>._start_servicer' was never awaited
    self.NameToInfo = {}    # Find file info given name
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED test/client_test.py::test_client_dns_failure - RuntimeError: Event loo...
FAILED test/client_test.py::test_client_connection_failure - RuntimeError: Ev...
FAILED test/client_test.py::test_client_connection_failure_unix_socket - Runt...
FAILED test/decorator_test.py::test_enter_decorator_without_parentheses - mod...
FAILED test/function_test.py::test_not_hydrated - RuntimeError: Event loop is...
FAILED test/function_test.py::test_call_unhydrated_function - RuntimeError: E...
FAILED test/mount_test.py::test_chained_entries - RuntimeError: Event loop is...
FAILED test/stub_test.py::test_run_function_without_app_error - RuntimeError:...
FAILED test_enter_decorator.py::TestEnterDecorator::test_function_without_parentheses
ERROR test/aio_test.py::test_new - asyncio.exceptions.CancelledError
ERROR test/async_utils_test.py::test_retry - AssertionError: previous item wa...
ERROR test/blob_test.py::test_blob_put_get - RuntimeError: Event loop is closed
ERROR test/blob_test.py::test_blob_put_failure - RuntimeError: Event loop is ...
ERROR test/blob_test.py::test_blob_get_failure - RuntimeError: Event loop is ...
ERROR test/blob_test.py::test_blob_large - RuntimeError: Event loop is closed
ERROR test/blob_test.py::test_blob_multipart - RuntimeError: Event loop is cl...
ERROR test/cli_test.py::test_app_deploy_success - RuntimeError: Event loop is...
ERROR test/cli_test.py::test_app_deploy_with_name - RuntimeError: Event loop ...
ERROR test/cli_test.py::test_secret_create - RuntimeError: Event loop is closed
ERROR test/cli_test.py::test_secret_list - RuntimeError: Event loop is closed
ERROR test/cli_test.py::test_app_token_new - RuntimeError: Event loop is closed
ERROR test/cli_test.py::test_app_setup - RuntimeError: Event loop is closed
ERROR test/cli_test.py::test_run - RuntimeError: Event loop is closed
ERROR test/cli_test.py::test_run_async - RuntimeError: Event loop is closed
ERROR test/cli_test.py::test_run_generator - RuntimeError: Event loop is closed
ERROR test/cli_test.py::test_help_message_unspecified_function - RuntimeError...
ERROR test/cli_test.py::test_run_states - RuntimeError: Event loop is closed
ERROR test/cli_test.py::test_run_detach - RuntimeError: Event loop is closed
ERROR test/cli_test.py::test_run_quiet - RuntimeError: Event loop is closed
ERROR test/cli_test.py::test_deploy - RuntimeError: Event loop is closed
ERROR test/cli_test.py::test_run_custom_stub - RuntimeError: Event loop is cl...
ERROR test/cli_test.py::test_run_aiofunc - RuntimeError: Event loop is closed
ERROR test/cli_test.py::test_run_local_entrypoint - RuntimeError: Event loop ...
ERROR test/cli_test.py::test_run_local_entrypoint_invalid_with_stub_run - Run...
ERROR test/cli_test.py::test_run_parse_args_entrypoint - RuntimeError: Event ...
ERROR test/cli_test.py::test_run_parse_args_function - RuntimeError: Event lo...
ERROR test/cli_test.py::test_run_user_script_exception - RuntimeError: Event ...
ERROR test/cli_test.py::test_no_user_code_in_synchronicity_run - RuntimeError...
ERROR test/cli_test.py::test_no_user_code_in_synchronicity_deploy - RuntimeEr...
ERROR test/cli_test.py::test_serve - RuntimeError: Event loop is closed
ERROR test/cli_test.py::test_shell - RuntimeError: Event loop is closed
ERROR test/cli_test.py::test_shell_cmd - RuntimeError: Event loop is closed
ERROR test/cli_test.py::test_app_descriptions - RuntimeError: Event loop is c...
ERROR test/cli_test.py::test_logs - RuntimeError: Event loop is closed
ERROR test/cli_test.py::test_nfs_get - RuntimeError: Event loop is closed
ERROR test/cli_test.py::test_volume_cli - RuntimeError: Event loop is closed
ERROR test/cli_test.py::test_volume_get - RuntimeError: Event loop is closed
ERROR test/cli_test.py::test_volume_put_force - RuntimeError: Event loop is c...
ERROR test/cli_test.py::test_volume_rm - RuntimeError: Event loop is closed
ERROR test/cli_test.py::test_environment_flag[command0] - RuntimeError: Event...
ERROR test/cli_test.py::test_environment_flag[command1] - RuntimeError: Event...
ERROR test/cli_test.py::test_environment_flag[command2] - RuntimeError: Event...
ERROR test/cli_test.py::test_environment_flag[command3] - RuntimeError: Event...
ERROR test/cli_test.py::test_environment_noflag[command0] - RuntimeError: Eve...
ERROR test/cli_test.py::test_environment_noflag[command1] - RuntimeError: Eve...
ERROR test/cli_test.py::test_environment_noflag[command2] - RuntimeError: Eve...
ERROR test/cli_test.py::test_environment_noflag[command3] - RuntimeError: Eve...
ERROR test/cli_test.py::test_cls - RuntimeError: Event loop is closed
ERROR test/cli_test.py::test_profile_list - RuntimeError: Event loop is closed
ERROR test/client_test.py::test_client_type - RuntimeError: Event loop is closed
ERROR test/client_test.py::test_client_platform_string - RuntimeError: Event ...
ERROR test/client_test.py::test_container_client_type - RuntimeError: Event l...
ERROR test/client_test.py::test_client_connection_timeout - RuntimeError: Eve...
ERROR test/client_test.py::test_client_server_error - RuntimeError: Event loo...
ERROR test/client_test.py::test_client_old_version - RuntimeError: Event loop...
ERROR test/client_test.py::test_client_deprecated - RuntimeError: Event loop ...
ERROR test/client_test.py::test_client_unauthenticated - RuntimeError: Event ...
ERROR test/client_test.py::test_client_from_env - RuntimeError: Event loop is...
ERROR test/client_test.py::test_multiple_profile_error - RuntimeError: Event ...
ERROR test/client_test.py::test_implicit_default_profile_warning - RuntimeErr...
ERROR test/cls_test.py::test_run_class - RuntimeError: Event loop is closed
ERROR test/cls_test.py::test_call_class_sync - RuntimeError: Event loop is cl...
ERROR test/cls_test.py::test_call_cls_remote_sync - RuntimeError: Event loop ...
ERROR test/cls_test.py::test_call_cls_remote_invalid_type - RuntimeError: Eve...
ERROR test/cls_test.py::test_call_cls_remote_modal_type - RuntimeError: Event...
ERROR test/cls_test.py::test_call_class_async - RuntimeError: Event loop is c...
ERROR test/cls_test.py::test_run_class_serialized - RuntimeError: Event loop ...
ERROR test/cls_test.py::test_call_cls_remote_async - RuntimeError: Event loop...
ERROR test/cls_test.py::test_can_call_locally - RuntimeError: Event loop is c...
ERROR test/cls_test.py::test_can_call_remotely_from_local - RuntimeError: Eve...
ERROR test/cls_test.py::test_call_cls_remote_no_args - RuntimeError: Event lo...
ERROR test/cls_test.py::test_lookup - RuntimeError: Event loop is closed
ERROR test/cls_test.py::test_lookup_lazy_remote - RuntimeError: Event loop is...
ERROR test/cls_test.py::test_lookup_lazy_spawn - RuntimeError: Event loop is ...
ERROR test/cls_test.py::test_call_not_modal_method - RuntimeError: Event loop...
ERROR test/cls_test.py::test_dont_enter_on_local_access - RuntimeError: Event...
ERROR test/cls_test.py::test_dont_enter_on_local_non_modal_call - RuntimeErro...
ERROR test/cls_test.py::test_enter_on_local_modal_call - RuntimeError: Event ...
ERROR test/cls_test.py::test_async_enter_on_local_modal_call - RuntimeError: ...
ERROR test/cls_test.py::test_derived_cls - RuntimeError: Event loop is closed
ERROR test/cls_test.py::test_derived_cls_external_file - RuntimeError: Event ...
ERROR test/cls_test.py::test_rehydrate - RuntimeError: Event loop is closed
ERROR test/cls_test.py::test_unhydrated - RuntimeError: Event loop is closed
ERROR test/cls_test.py::test_method_args - RuntimeError: Event loop is closed
ERROR test/cls_test.py::test_keep_warm_depr - RuntimeError: Event loop is closed
ERROR test/cls_test.py::test_handlers - RuntimeError: Event loop is closed
ERROR test/cls_test.py::test_build_image - RuntimeError: Event loop is closed
ERROR test/cls_test.py::test_disallow_lifecycle_decorators_with_method[blocking__build]
ERROR test/cls_test.py::test_disallow_lifecycle_decorators_with_method[blocking__enter]
ERROR test/cls_test.py::test_disallow_lifecycle_decorators_with_method[blocking__exit]
ERROR test/cls_test.py::test_deprecated_sync_methods - RuntimeError: Event lo...
ERROR test/cls_test.py::test_deprecated_async_methods - RuntimeError: Event l...
ERROR test/cls_test.py::test_snap_method_without_snapshot_enabled - RuntimeEr...
ERROR test/config_test.py::test_config_store_user - RuntimeError: Event loop ...
ERROR test/config_test.py::test_workspace_lookup - RuntimeError: Event loop i...
ERROR test/container_app_test.py::test_container_function_lazily_imported - R...
ERROR test/container_test.py::test_success - RuntimeError: Event loop is closed
ERROR test/container_test.py::test_generator_success - RuntimeError: Event lo...
ERROR test/container_test.py::test_generator_failure - RuntimeError: Event lo...
ERROR test/container_test.py::test_async - RuntimeError: Event loop is closed
ERROR test/container_test.py::test_failure - RuntimeError: Event loop is closed
ERROR test/container_test.py::test_raises_base_exception - RuntimeError: Even...
ERROR test/container_test.py::test_keyboardinterrupt - RuntimeError: Event lo...
ERROR test/container_test.py::test_rate_limited - RuntimeError: Event loop is...
ERROR test/container_test.py::test_grpc_failure - RuntimeError: Event loop is...
ERROR test/container_test.py::test_missing_main_conditional - RuntimeError: E...
ERROR test/container_test.py::test_startup_failure - RuntimeError: Event loop...
ERROR test/container_test.py::test_from_local_python_packages_inside_container
ERROR test/container_test.py::test_webhook - RuntimeError: Event loop is closed
ERROR test/container_test.py::test_serialized_function - RuntimeError: Event ...
ERROR test/container_test.py::test_webhook_serialized - RuntimeError: Event l...
ERROR test/container_test.py::test_function_returning_generator - RuntimeErro...
ERROR test/container_test.py::test_asgi - RuntimeError: Event loop is closed
ERROR test/container_test.py::test_wsgi - RuntimeError: Event loop is closed
ERROR test/container_test.py::test_webhook_streaming_sync - RuntimeError: Eve...
ERROR test/container_test.py::test_webhook_streaming_async - RuntimeError: Ev...
ERROR test/container_test.py::test_cls_function - RuntimeError: Event loop is...
ERROR test/container_test.py::test_lifecycle_enter_sync - RuntimeError: Event...
ERROR test/container_test.py::test_lifecycle_enter_async - RuntimeError: Even...
ERROR test/container_test.py::test_param_cls_function - RuntimeError: Event l...
ERROR test/container_test.py::test_cls_web_endpoint - RuntimeError: Event loo...
ERROR test/container_test.py::test_serialized_cls - RuntimeError: Event loop ...
ERROR test/container_test.py::test_cls_generator - RuntimeError: Event loop i...
ERROR test/container_test.py::test_checkpointing_cls_function - RuntimeError:...
ERROR test/container_test.py::test_cls_enter_uses_event_loop - RuntimeError: ...
ERROR test/container_test.py::test_container_heartbeats - RuntimeError: Event...
ERROR test/container_test.py::test_cli - RuntimeError: Event loop is closed
ERROR test/container_test.py::test_function_sibling_hydration - RuntimeError:...
ERROR test/container_test.py::test_multistub - RuntimeError: Event loop is cl...
ERROR test/container_test.py::test_multistub_privately_decorated - RuntimeErr...
ERROR test/container_test.py::test_multistub_privately_decorated_named_stub
ERROR test/container_test.py::test_multistub_same_name_warning - RuntimeError...
ERROR test/container_test.py::test_multistub_serialized_func - RuntimeError: ...
ERROR test/container_test.py::test_image_run_function_no_warn - RuntimeError:...
ERROR test/container_test.py::test_concurrent_inputs_sync_function - RuntimeE...
ERROR test/container_test.py::test_concurrent_inputs_async_function - Runtime...
ERROR test/container_test.py::test_unassociated_function - RuntimeError: Even...
ERROR test/container_test.py::test_param_cls_function_calling_local - Runtime...
ERROR test/container_test.py::test_derived_cls - RuntimeError: Event loop is ...
ERROR test/container_test.py::test_call_function_that_calls_function - Runtim...
ERROR test/container_test.py::test_call_function_that_calls_method - RuntimeE...
ERROR test/container_test.py::test_checkpoint_and_restore_success - RuntimeEr...
ERROR test/container_test.py::test_volume_commit_on_exit - RuntimeError: Even...
ERROR test/container_test.py::test_volume_commit_on_error - RuntimeError: Eve...
ERROR test/container_test.py::test_no_volume_commit_on_exit - RuntimeError: E...
ERROR test/container_test.py::test_volume_commit_on_exit_doesnt_fail_container
ERROR test/container_test.py::test_function_dep_hydration - RuntimeError: Eve...
ERROR test/container_test.py::test_build_decorator_cls - RuntimeError: Event ...
ERROR test/container_test.py::test_multiple_build_decorator_cls - RuntimeErro...
ERROR test/container_test.py::test_function_io_doesnt_inspect_args_or_return_values
ERROR test/container_test.py::test_cancellation_aborts_current_input_on_match[delay-input_args0-cancelled_input_ids0-expected_container_output0-1]
ERROR test/container_test.py::test_cancellation_aborts_current_input_on_match[delay_async-input_args1-cancelled_input_ids1-expected_container_output1-1]
ERROR test/container_test.py::test_cancellation_aborts_current_input_on_match[delay-input_args2-cancelled_input_ids2-expected_container_output2-0]
ERROR test/container_test.py::test_cancellation_aborts_current_input_on_match[delay_async-input_args3-cancelled_input_ids3-expected_container_output3-0]
ERROR test/container_test.py::test_cancellation_stops_task_with_concurrent_inputs[delay]
ERROR test/container_test.py::test_cancellation_stops_task_with_concurrent_inputs[delay_async]
ERROR test/container_test.py::test_lifecycle_full - RuntimeError: Event loop ...
ERROR test/container_test.py::test_stop_fetching_inputs - RuntimeError: Event...
ERROR test/container_test.py::test_container_heartbeat_survives_grpc_deadlines
ERROR test/container_test.py::test_container_heartbeat_survives_local_exceptions
ERROR test/container_test.py::test_sigint_termination_input[delay] - RuntimeE...
ERROR test/container_test.py::test_sigint_termination_input[delay_async] - Ru...
ERROR test/container_test.py::test_sigint_termination_enter_handler[delay-sync_enter]
ERROR test/container_test.py::test_sigint_termination_enter_handler[delay-async_enter]
ERROR test/container_test.py::test_sigint_termination_enter_handler[delay_async-sync_enter]
ERROR test/container_test.py::test_sigint_termination_enter_handler[delay_async-async_enter]
ERROR test/container_test.py::test_sigint_termination_exit_handler[sync_exit]
ERROR test/container_test.py::test_sigint_termination_exit_handler[async_exit]
ERROR test/cpu_test.py::test_cpu_lower_bound - RuntimeError: Event loop is cl...
ERROR test/dict_test.py::test_dict_app - RuntimeError: Event loop is closed
ERROR test/dict_test.py::test_dict_ephemeral - RuntimeError: Event loop is cl...
ERROR test/dict_test.py::test_dict_lazy_hydrate_named - RuntimeError: Event l...
ERROR test/e2e_test.py::test_run_e2e - RuntimeError: Event loop is closed
ERROR test/e2e_test.py::test_run_progress_info - RuntimeError: Event loop is ...
ERROR test/e2e_test.py::test_run_profiler - RuntimeError: Event loop is closed
ERROR test/e2e_test.py::test_run_unconsumed_map - RuntimeError: Event loop is...
ERROR test/e2e_test.py::test_auth_failure_last_line - RuntimeError: Event loo...
ERROR test/function_serialization_test.py::test_serialize_deserialize_function
ERROR test/function_test.py::test_run_function - RuntimeError: Event loop is ...
ERROR test/function_test.py::test_call_function_locally - RuntimeError: Event...
ERROR test/function_test.py::test_map[False] - RuntimeError: Event loop is cl...
ERROR test/function_test.py::test_map[True] - RuntimeError: Event loop is closed
ERROR test/function_test.py::test_for_each - RuntimeError: Event loop is closed
ERROR test/function_test.py::test_map_none_values - RuntimeError: Event loop ...
ERROR test/function_test.py::test_starmap - RuntimeError: Event loop is closed
ERROR test/function_test.py::test_function_memory_request - RuntimeError: Eve...
ERROR test/function_test.py::test_function_cpu_request - RuntimeError: Event ...
ERROR test/function_test.py::test_function_future - RuntimeError: Event loop ...
ERROR test/function_test.py::test_function_future_async - RuntimeError: Event...
ERROR test/function_test.py::test_generator - RuntimeError: Event loop is closed
ERROR test/function_test.py::test_generator_map_invalid - RuntimeError: Event...
ERROR test/function_test.py::test_generator_async - RuntimeError: Event loop ...
ERROR test/function_test.py::test_generator_future - RuntimeError: Event loop...
ERROR test/function_test.py::test_sync_parallelism - RuntimeError: Event loop...
ERROR test/function_test.py::test_proxy - RuntimeError: Event loop is closed
ERROR test/function_test.py::test_function_exception - RuntimeError: Event lo...
ERROR test/function_test.py::test_function_exception_async - RuntimeError: Ev...
ERROR test/function_test.py::test_map_exceptions - RuntimeError: Event loop i...
ERROR test/function_test.py::test_function_relative_import_hint - RuntimeErro...
ERROR test/function_test.py::test_closure_valued_serialized_function - Runtim...
ERROR test/function_test.py::test_new_hydrated_internal - RuntimeError: Event...
ERROR test/function_test.py::test_from_id - RuntimeError: Event loop is closed
ERROR test/function_test.py::test_allow_cross_region_volumes - RuntimeError: ...
ERROR test/function_test.py::test_allow_cross_region_volumes_webhook - Runtim...
ERROR test/function_test.py::test_serialize_deserialize_function_handle - Run...
ERROR test/function_test.py::test_default_cloud_provider - RuntimeError: Even...
ERROR test/function_test.py::test_invalid_large_serialization - RuntimeError:...
ERROR test/function_test.py::test_deps_explicit - RuntimeError: Event loop is...
ERROR test/function_test.py::test_deps_closurevars - RuntimeError: Event loop...
ERROR test/function_test.py::test_calls_should_not_unwrap_modal_objects - Run...
ERROR test/function_test.py::test_calls_should_not_unwrap_modal_objects_gen
ERROR test/function_test.py::test_mount_deps_have_ids - RuntimeError: Event l...
ERROR test/function_test.py::test_no_state_reuse - RuntimeError: Event loop i...
ERROR test/gpu_test.py::test_gpu_true_function - RuntimeError: Event loop is ...
ERROR test/gpu_test.py::test_gpu_any_function - RuntimeError: Event loop is c...
ERROR test/gpu_test.py::test_gpu_string_config - RuntimeError: Event loop is ...
ERROR test/gpu_test.py::test_gpu_string_count_config - RuntimeError: Event lo...
ERROR test/gpu_test.py::test_gpu_config_function - RuntimeError: Event loop i...
ERROR test/gpu_test.py::test_cloud_provider_selection - RuntimeError: Event l...
ERROR test/gpu_test.py::test_memory_selection_gpu_variant[0-2-40] - RuntimeEr...
ERROR test/gpu_test.py::test_memory_selection_gpu_variant[40-2-40] - RuntimeE...
ERROR test/gpu_test.py::test_memory_selection_gpu_variant[80-8-80] - RuntimeE...
ERROR test/gpu_test.py::test_memory_selection_gpu_variant[40GB-2-40] - Runtim...
ERROR test/gpu_test.py::test_memory_selection_gpu_variant[80GB-8-80] - Runtim...
ERROR test/gpu_test.py::test_gpu_type_selection_from_count[1] - RuntimeError:...
ERROR test/gpu_test.py::test_gpu_type_selection_from_count[2] - RuntimeError:...
ERROR test/gpu_test.py::test_gpu_type_selection_from_count[3] - RuntimeError:...
ERROR test/gpu_test.py::test_gpu_type_selection_from_count[4] - RuntimeError:...
ERROR test/grpc_utils_test.py::test_http_channel - RuntimeError: Event loop i...
ERROR test/grpc_utils_test.py::test_unix_channel - RuntimeError: Event loop i...
ERROR test/grpc_utils_test.py::test_channel_pool - RuntimeError: Event loop i...
ERROR test/grpc_utils_test.py::test_channel_pool_closed_transport - RuntimeEr...
ERROR test/grpc_utils_test.py::test_channel_pool_max_active - RuntimeError: E...
ERROR test/grpc_utils_test.py::test_retry_transient_errors - RuntimeError: Ev...
ERROR test/image_test.py::test_image_base[2023.12] - RuntimeError: Event loop...
ERROR test/image_test.py::test_image_base[2024.04] - RuntimeError: Event loop...
ERROR test/image_test.py::test_image_python_packages[2023.12] - RuntimeError:...
ERROR test/image_test.py::test_image_python_packages[2024.04] - RuntimeError:...
ERROR test/image_test.py::test_image_kwargs_validation[2023.12] - RuntimeErro...
ERROR test/image_test.py::test_image_kwargs_validation[2024.04] - RuntimeErro...
ERROR test/image_test.py::test_wrong_type[2023.12] - RuntimeError: Event loop...
ERROR test/image_test.py::test_wrong_type[2024.04] - RuntimeError: Event loop...
ERROR test/image_test.py::test_image_requirements_txt[2023.12] - RuntimeError...
ERROR test/image_test.py::test_image_requirements_txt[2024.04] - RuntimeError...
ERROR test/image_test.py::test_empty_install[2023.12] - RuntimeError: Event l...
ERROR test/image_test.py::test_empty_install[2024.04] - RuntimeError: Event l...
ERROR test/image_test.py::test_debian_slim_apt_install[2023.12] - RuntimeErro...
ERROR test/image_test.py::test_debian_slim_apt_install[2024.04] - RuntimeErro...
ERROR test/image_test.py::test_image_pip_install_pyproject[2023.12] - Runtime...
ERROR test/image_test.py::test_image_pip_install_pyproject[2024.04] - Runtime...
ERROR test/image_test.py::test_image_pip_install_pyproject_with_optionals[2023.12]
ERROR test/image_test.py::test_image_pip_install_pyproject_with_optionals[2024.04]
ERROR test/image_test.py::test_image_pip_install_private_repos[2023.12] - Run...
ERROR test/image_test.py::test_image_pip_install_private_repos[2024.04] - Run...
ERROR test/image_test.py::test_conda_install[2023.12] - RuntimeError: Event l...
ERROR test/image_test.py::test_conda_install[2024.04] - RuntimeError: Event l...
ERROR test/image_test.py::test_dockerfile_image[2023.12] - RuntimeError: Even...
ERROR test/image_test.py::test_dockerfile_image[2024.04] - RuntimeError: Even...
ERROR test/image_test.py::test_conda_update_from_environment[2023.12] - Runti...
ERROR test/image_test.py::test_conda_update_from_environment[2024.04] - Runti...
ERROR test/image_test.py::test_run_commands[2023.12] - RuntimeError: Event lo...
ERROR test/image_test.py::test_run_commands[2024.04] - RuntimeError: Event lo...
ERROR test/image_test.py::test_dockerhub_install[2023.12] - RuntimeError: Eve...
ERROR test/image_test.py::test_dockerhub_install[2024.04] - RuntimeError: Eve...
ERROR test/image_test.py::test_ecr_install[2023.12] - RuntimeError: Event loo...
ERROR test/image_test.py::test_ecr_install[2024.04] - RuntimeError: Event loo...
ERROR test/image_test.py::test_image_run_function[2023.12] - RuntimeError: Ev...
ERROR test/image_test.py::test_image_run_function[2024.04] - RuntimeError: Ev...
ERROR test/image_test.py::test_image_run_function_interactivity[2023.12] - Ru...
ERROR test/image_test.py::test_image_run_function_interactivity[2024.04] - Ru...
ERROR test/image_test.py::test_image_run_function_globals[2023.12] - RuntimeE...
ERROR test/image_test.py::test_image_run_function_globals[2024.04] - RuntimeE...
ERROR test/image_test.py::test_image_run_unserializable_function[2023.12] - R...
ERROR test/image_test.py::test_image_run_unserializable_function[2024.04] - R...
ERROR test/image_test.py::test_image_run_function_with_args[2023.12] - Runtim...
ERROR test/image_test.py::test_image_run_function_with_args[2024.04] - Runtim...
ERROR test/image_test.py::test_poetry[2023.12] - RuntimeError: Event loop is ...
ERROR test/image_test.py::test_poetry[2024.04] - RuntimeError: Event loop is ...
ERROR test/image_test.py::test_image_copy_local_dir[2023.12] - RuntimeError: ...
ERROR test/image_test.py::test_image_copy_local_dir[2024.04] - RuntimeError: ...
ERROR test/image_test.py::test_image_docker_command_copy[2023.12] - RuntimeEr...
ERROR test/image_test.py::test_image_docker_command_copy[2024.04] - RuntimeEr...
ERROR test/image_test.py::test_image_dockerfile_copy[2023.12] - RuntimeError:...
ERROR test/image_test.py::test_image_dockerfile_copy[2024.04] - RuntimeError:...
ERROR test/image_test.py::test_image_env[2023.12] - RuntimeError: Event loop ...
ERROR test/image_test.py::test_image_env[2024.04] - RuntimeError: Event loop ...
ERROR test/image_test.py::test_image_gpu[2023.12] - RuntimeError: Event loop ...
ERROR test/image_test.py::test_image_gpu[2024.04] - RuntimeError: Event loop ...
ERROR test/image_test.py::test_image_force_build[2023.12] - RuntimeError: Eve...
ERROR test/image_test.py::test_image_force_build[2024.04] - RuntimeError: Eve...
ERROR test/image_test.py::test_workdir[2023.12] - RuntimeError: Event loop is...
ERROR test/image_test.py::test_workdir[2024.04] - RuntimeError: Event loop is...
ERROR test/image_test.py::test_image_build_snapshot - RuntimeError: Event loo...
ERROR test/image_test.py::test_inside_ctx_unhydrated - RuntimeError: Event lo...
ERROR test/image_test.py::test_inside_ctx_hydrated - RuntimeError: Event loop...
ERROR test/image_test.py::test_get_modal_requirements_path[2023.12-3.11] - Ru...
ERROR test/image_test.py::test_get_modal_requirements_path[2023.12-3.12] - Ru...
ERROR test/image_test.py::test_get_modal_requirements_path[2023.12-3.12.1] - ...
ERROR test/image_test.py::test_get_modal_requirements_path[2023.12-3.12.1-gnu]
ERROR test/image_test.py::test_get_modal_requirements_path[2024.04-3.11] - Ru...
ERROR test/image_test.py::test_get_modal_requirements_path[2024.04-3.12] - Ru...
ERROR test/image_test.py::test_get_modal_requirements_path[2024.04-3.12.1] - ...
ERROR test/image_test.py::test_get_modal_requirements_path[2024.04-3.12.1-gnu]
ERROR test/image_test.py::test_image_builder_version - RuntimeError: Event lo...
ERROR test/image_test.py::test_image_builder_supported_versions - RuntimeErro...
ERROR test/image_test.py::test_image_stability_on_2023_12 - RuntimeError: Eve...
ERROR test/live_reload_test.py::test_live_reload - RuntimeError: Event loop i...
ERROR test/live_reload_test.py::test_file_changes_trigger_reloads - RuntimeEr...
ERROR test/live_reload_test.py::test_no_change - RuntimeError: Event loop is ...
ERROR test/live_reload_test.py::test_heartbeats - RuntimeError: Event loop is...
ERROR test/lookup_test.py::test_persistent_object - RuntimeError: Event loop ...
ERROR test/lookup_test.py::test_lookup_function - RuntimeError: Event loop is...
ERROR test/lookup_test.py::test_webhook_lookup - RuntimeError: Event loop is ...
ERROR test/lookup_test.py::test_deploy_exists - RuntimeError: Event loop is c...
ERROR test/lookup_test.py::test_create_if_missing - RuntimeError: Event loop ...
ERROR test/mount_test.py::test_get_files - RuntimeError: Event loop is closed
ERROR test/mount_test.py::test_create_mount - RuntimeError: Event loop is closed
ERROR test/mount_test.py::test_create_mount_file_errors - RuntimeError: Event...
ERROR test/mount_test.py::test_from_local_python_packages - RuntimeError: Eve...
ERROR test/mount_test.py::test_stub_mounts - RuntimeError: Event loop is closed
ERROR test/mount_test.py::test_from_local_python_packages_missing_module - Ru...
ERROR test/mounted_files_test.py::test_mounted_files_script - RuntimeError: E...
ERROR test/mounted_files_test.py::test_mounted_files_serialized - RuntimeErro...
ERROR test/mounted_files_test.py::test_mounted_files_package - RuntimeError: ...
ERROR test/mounted_files_test.py::test_mounted_files_package_no_automount - R...
ERROR test/mounted_files_test.py::test_mounted_files_sys_prefix - RuntimeErro...
ERROR test/mounted_files_test.py::test_mounted_files_symlinked_python_install
ERROR test/mounted_files_test.py::test_mounted_files_config - RuntimeError: E...
ERROR test/mounted_files_test.py::test_e2e_modal_run_py_file_mounts - Runtime...
ERROR test/mounted_files_test.py::test_e2e_modal_run_py_module_mounts - Runti...
ERROR test/mounted_files_test.py::test_mounts_are_not_traversed_on_declaration
ERROR test/mounted_files_test.py::test_mount_dedupe - RuntimeError: Event loo...
ERROR test/mounted_files_test.py::test_mount_dedupe_explicit - RuntimeError: ...
ERROR test/mounted_files_test.py::test_pdm_cache_automount_exclude - RuntimeE...
ERROR test/mounted_files_test.py::test_mount_directory_with_symlinked_file - ...
ERROR test/network_file_system_test.py::test_network_file_system_files - Runt...
ERROR test/network_file_system_test.py::test_network_file_system_handle_single_file
ERROR test/network_file_system_test.py::test_network_file_system_handle_dir
ERROR test/network_file_system_test.py::test_network_file_system_handle_big_file
ERROR test/network_file_system_test.py::test_old_syntax - RuntimeError: Event...
ERROR test/network_file_system_test.py::test_redeploy - RuntimeError: Event l...
ERROR test/network_file_system_test.py::test_read_file - RuntimeError: Event ...
ERROR test/network_file_system_test.py::test_write_file - RuntimeError: Event...
ERROR test/network_file_system_test.py::test_persisted - RuntimeError: Event ...
ERROR test/network_file_system_test.py::test_nfs_ephemeral - RuntimeError: Ev...
ERROR test/network_file_system_test.py::test_nfs_lazy_hydration_from_name - R...
ERROR test/object_test.py::test_async_factory - RuntimeError: Event loop is c...
ERROR test/object_test.py::test_new_hydrated - RuntimeError: Event loop is cl...
ERROR test/queue_test.py::test_queue - RuntimeError: Event loop is closed
ERROR test/queue_test.py::test_queue_ephemeral - RuntimeError: Event loop is ...
ERROR test/queue_test.py::test_queue_blocking_put[0.02-1-100] - RuntimeError:...
ERROR test/queue_test.py::test_queue_blocking_put[10.0-0-0] - RuntimeError: E...
ERROR test/queue_test.py::test_queue_blocking_put[0.0-1-100] - RuntimeError: ...
ERROR test/queue_test.py::test_queue_blocking_put[None-0-0] - RuntimeError: E...
ERROR test/queue_test.py::test_queue_nonblocking_put - RuntimeError: Event lo...
ERROR test/queue_test.py::test_queue_deploy - RuntimeError: Event loop is closed
ERROR test/queue_test.py::test_queue_lazy_hydrate_from_name - RuntimeError: E...
ERROR test/retries_test.py::test_retries - RuntimeError: Event loop is closed
ERROR test/runner_test.py::test_run_stub - RuntimeError: Event loop is closed
ERROR test/runner_test.py::test_run_stub_unauthenticated - RuntimeError: Even...
ERROR test/runner_test.py::test_run_stub_profile_env_with_refs - RuntimeError...
ERROR test/runner_test.py::test_run_stub_custom_env_with_refs - RuntimeError:...
ERROR test/sandbox_test.py::test_spawn_sandbox - RuntimeError: Event loop is ...
ERROR test/sandbox_test.py::test_sandbox_mount - RuntimeError: Event loop is ...
ERROR test/sandbox_test.py::test_sandbox_image - RuntimeError: Event loop is ...
ERROR test/sandbox_test.py::test_sandbox_secret - RuntimeError: Event loop is...
ERROR test/sandbox_test.py::test_sandbox_nfs - RuntimeError: Event loop is cl...
ERROR test/sandbox_test.py::test_sandbox_from_id - RuntimeError: Event loop i...
ERROR test/sandbox_test.py::test_sandbox_terminate - RuntimeError: Event loop...
ERROR test/sandbox_test.py::test_sandbox_stdin_async - RuntimeError: Event lo...
ERROR test/sandbox_test.py::test_sandbox_stdin - RuntimeError: Event loop is ...
ERROR test/sandbox_test.py::test_sandbox_stdin_invalid_write - RuntimeError: ...
ERROR test/sandbox_test.py::test_sandbox_stdin_write_after_eof - RuntimeError...
ERROR test/sandbox_test.py::test_sandbox_async_for - RuntimeError: Event loop...
ERROR test/schedule_test.py::test_schedule - RuntimeError: Event loop is closed
ERROR test/scheduler_placement_test.py::test_scheduler_placement - RuntimeErr...
ERROR test/secret_test.py::test_secret_from_dict - RuntimeError: Event loop i...
ERROR test/secret_test.py::test_secret_from_dotenv - RuntimeError: Event loop...
ERROR test/secret_test.py::test_secret_from_local_environ - RuntimeError: Eve...
ERROR test/secret_test.py::test_secret_from_dict_none - RuntimeError: Event l...
ERROR test/secret_test.py::test_secret_from_name - RuntimeError: Event loop i...
ERROR test/serialization_test.py::test_roundtrip - RuntimeError: Event loop i...
ERROR test/stub_composition_test.py::test_stub_composition_includes_all_functions
ERROR test/stub_test.py::test_kwargs - RuntimeError: Event loop is closed
ERROR test/stub_test.py::test_attrs - RuntimeError: Event loop is closed
ERROR test/stub_test.py::test_stub_type_validation - RuntimeError: Event loop...
ERROR test/stub_test.py::test_redeploy - RuntimeError: Event loop is closed
ERROR test/stub_test.py::test_create_object_exception - RuntimeError: Event l...
ERROR test/stub_test.py::test_deploy_falls_back_to_app_name - RuntimeError: E...
ERROR test/stub_test.py::test_deploy_uses_deployment_name_if_specified - Runt...
ERROR test/stub_test.py::test_run_state - RuntimeError: Event loop is closed
ERROR test/stub_test.py::test_deploy_state - RuntimeError: Event loop is closed
ERROR test/stub_test.py::test_detach_state - RuntimeError: Event loop is closed
ERROR test/stub_test.py::test_grpc_protocol - RuntimeError: Event loop is closed
ERROR test/stub_test.py::test_registered_web_endpoints - RuntimeError: Event ...
ERROR test/stub_test.py::test_redeploy_delete_objects - RuntimeError: Event l...
ERROR test/stub_test.py::test_unhydrate - RuntimeError: Event loop is closed
ERROR test/stub_test.py::test_keyboard_interrupt - RuntimeError: Event loop i...
ERROR test/stub_test.py::test_deploy_disconnect - RuntimeError: Event loop is...
ERROR test/stub_test.py::test_redeploy_from_name_change - RuntimeError: Event...
ERROR test/stub_test.py::test_hydrated_other_app_object_gets_referenced - Run...
ERROR test/token_flow_test.py::test_token_flow_server - RuntimeError: Event l...
ERROR test/tunnel_test.py::test_tunnel_outside_container - RuntimeError: Even...
ERROR test/tunnel_test.py::test_invalid_port_numbers - RuntimeError: Event lo...
ERROR test/tunnel_test.py::test_create_tunnel - RuntimeError: Event loop is c...
ERROR test/volume_test.py::test_volume_mount - RuntimeError: Event loop is cl...
ERROR test/volume_test.py::test_volume_commit[False] - RuntimeError: Event lo...
ERROR test/volume_test.py::test_volume_commit[True] - RuntimeError: Event loo...
ERROR test/volume_test.py::test_volume_get - RuntimeError: Event loop is closed
ERROR test/volume_test.py::test_volume_reload - RuntimeError: Event loop is c...
ERROR test/volume_test.py::test_redeploy - RuntimeError: Event loop is closed
ERROR test/volume_test.py::test_volume_batch_upload - RuntimeError: Event loo...
ERROR test/volume_test.py::test_volume_batch_upload_force - RuntimeError: Eve...
ERROR test/volume_test.py::test_volume_upload_removed_file - RuntimeError: Ev...
ERROR test/volume_test.py::test_volume_upload_large_file - RuntimeError: Even...
ERROR test/volume_test.py::test_volume_upload_file_timeout - RuntimeError: Ev...
ERROR test/volume_test.py::test_volume_copy_1 - RuntimeError: Event loop is c...
ERROR test/volume_test.py::test_volume_copy_2 - RuntimeError: Event loop is c...
ERROR test/volume_test.py::test_persisted - RuntimeError: Event loop is closed
ERROR test/volume_test.py::test_ephemeral - RuntimeError: Event loop is closed
ERROR test/volume_test.py::test_lazy_hydration_from_named - RuntimeError: Eve...
ERROR test/webhook_test.py::test_webhook - RuntimeError: Event loop is closed
ERROR test/webhook_test.py::test_webhook_forgot_function - RuntimeError: Even...
ERROR test/webhook_test.py::test_webhook_decorator_in_wrong_order - RuntimeEr...
ERROR test/webhook_test.py::test_asgi_wsgi - RuntimeError: Event loop is closed
ERROR test/webhook_test.py::test_positional_method - RuntimeError: Event loop...
= 9 failed, 103 passed, 1 skipped, 39 warnings, 427 errors in 120.26s (0:02:00) =
sys:1: RuntimeWarning: coroutine 'Synchronizer._wrap_check_async_leakage.<locals>.coro_wrapped' was never awaited
RuntimeWarning: Enable tracemalloc to get the object allocation traceback
sys:1: RuntimeWarning: coroutine 'wrap_coro_exception.<locals>.coro_wrapped' was never awaited
RuntimeWarning: Enable tracemalloc to get the object allocation traceback
sys:1: RuntimeWarning: coroutine 'servicer_factory.<locals>.create_server.<locals>._start_servicer' was never awaited
RuntimeWarning: Enable tracemalloc to get the object allocation traceback
